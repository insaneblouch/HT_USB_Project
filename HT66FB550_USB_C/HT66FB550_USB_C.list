				;file C:\Users\james\Google ¶³ºÝµwºÐ\¦Û»sª©¤l\holtek\GitHub\HT_USB_Project\HT66FB550_USB_C\main.c
				;1	#include "HT66FB550.h"
				;2	#include "HT66FB550_MCU.h"
				;3	#include "HT66FB550_IO.h"
				;4	#include "HT66FB550_typedef.h"
				;5	#include "HT66FB550_UART.h"
				;6	
				;7	void main()
				;8	{
				@code .SECTION 'CODE'
				include HT66FB550.inc
0000	2801	jmp     _main_startup1
				@start .SECTION 'CODE'
				_main_startup1:
				@start .SECTION 'CODE'
0001	2828	jmp     _main
				;9		volatile int a;
				;10		HT66FB550_MCU_Init();
				@dummy36 .SECTION 'CODE'
				_main:
				_main:
0028	2002	call    _HT66FB550_MCU_Init
				;11		HT66FB550_IO_INIT();
0029	26B2	call    _HT66FB550_IO_INIT
				;12		//_acer0 = 0;
				;13		//_acer1 = 0;
				;14		//_pbc = 0;
				;15		UART_Init();
002A	200A	call    _UART_Init
				;16		
				;17		_pb1 = 1;
002B	30A2	set     PB1
				;18		loop:
				;19		for(a=0; a<10000; a++)
002C	5F27	clr     a[0]
002D	5F28	clr     a[1]
				_L2:
002E	0F0F	mov     a, FH
002F	4227	sub     a, a[0]
0030	0F27	mov     a, 27H
0031	5228	sbc     a, a[1]
0032	1185	swap    ACC
0033	040A	xor     a, STATUS
0034	3D85	sz      ACC.3
0035	283C	jmp     _L204
0038	54A7	inc     a[0]
0039	3D0A	sz      Z
003A	54A8	inc     a[1]
003B	282E	jmp     _L2
				;20		UART_Put_Char(0x42);
0036	0F42	mov     a, 42H
0037	27B7	call    _UART_Put_Char
				;21		UART_Put_Char(0x42);
				_L204:
003C	0F42	mov     a, 42H
003D	27B7	call    _UART_Put_Char
				;22		UART_Put_Char(0x42);
003E	0F42	mov     a, 42H
003F	27B7	call    _UART_Put_Char
				;23		UART_Put_Char(0x43);
0040	0F43	mov     a, 43H
0041	27B7	call    _UART_Put_Char
				;24		UART_Put_Char(0x42);
0042	0F42	mov     a, 42H
0043	27B7	call    _UART_Put_Char
				;25		UART_Put_Char(0x41);
0044	0F41	mov     a, 41H
0045	27B7	call    _UART_Put_Char
				;26		UART_Put_Char(0x41);
0046	0F41	mov     a, 41H
0047	27B7	call    _UART_Put_Char
				;27		UART_Put_Char('\n');
0048	0F0A	mov     a, AH
0049	27B7	call    _UART_Put_Char
				;28		UART_Start();
004A	2778	call    _UART_Start
				;29		for(a=0; a<10000; a++);
004B	5F27	clr     a[0]
004C	5F28	clr     a[1]
				_L4:
004D	0F0F	mov     a, FH
004E	4227	sub     a, a[0]
004F	0F27	mov     a, 27H
0050	5228	sbc     a, a[1]
0051	1185	swap    ACC
0052	040A	xor     a, STATUS
0053	3D85	sz      ACC.3
0054	2859	jmp     _L205
0055	54A7	inc     a[0]
0056	3D0A	sz      Z
0057	54A8	inc     a[1]
0058	284D	jmp     _L4
				;30		for(a=0; a<10000; a++);
				_L205:
0059	5F27	clr     a[0]
005A	5F28	clr     a[1]
				_L6:
005B	0F0F	mov     a, FH
005C	4227	sub     a, a[0]
005D	0F27	mov     a, 27H
005E	5228	sbc     a, a[1]
005F	1185	swap    ACC
0060	040A	xor     a, STATUS
0061	3D85	sz      ACC.3
0062	2867	jmp     _L206
0063	54A7	inc     a[0]
0064	3D0A	sz      Z
0065	54A8	inc     a[1]
0066	285B	jmp     _L6
				;31		for(a=0; a<10000; a++);
				_L206:
0067	5F27	clr     a[0]
0068	5F28	clr     a[1]
				_L8:
0069	0F0F	mov     a, FH
006A	4227	sub     a, a[0]
006B	0F27	mov     a, 27H
006C	5228	sbc     a, a[1]
006D	1185	swap    ACC
006E	040A	xor     a, STATUS
006F	3D85	sz      ACC.3
0070	2875	jmp     _L207
0071	54A7	inc     a[0]
0072	3D0A	sz      Z
0073	54A8	inc     a[1]
0074	2869	jmp     _L8
				;32		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L207:
0075	5F27	clr     a[0]
0076	5F28	clr     a[1]
				_L10:
0077	0F0F	mov     a, FH
0078	4227	sub     a, a[0]
0079	0F27	mov     a, 27H
007A	5228	sbc     a, a[1]
007B	1185	swap    ACC
007C	040A	xor     a, STATUS
007D	3D85	sz      ACC.3
007E	2883	jmp     _L208
007F	54A7	inc     a[0]
0080	3D0A	sz      Z
0081	54A8	inc     a[1]
0082	2877	jmp     _L10
				_L208:
0083	5F27	clr     a[0]
0084	5F28	clr     a[1]
				_L12:
0085	0F0F	mov     a, FH
0086	4227	sub     a, a[0]
0087	0F27	mov     a, 27H
0088	5228	sbc     a, a[1]
0089	1185	swap    ACC
008A	040A	xor     a, STATUS
008B	3D85	sz      ACC.3
008C	2891	jmp     _L209
008D	54A7	inc     a[0]
008E	3D0A	sz      Z
008F	54A8	inc     a[1]
0090	2885	jmp     _L12
				;33		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L209:
0091	5F27	clr     a[0]
0092	5F28	clr     a[1]
				_L14:
0093	0F0F	mov     a, FH
0094	4227	sub     a, a[0]
0095	0F27	mov     a, 27H
0096	5228	sbc     a, a[1]
0097	1185	swap    ACC
0098	040A	xor     a, STATUS
0099	3D85	sz      ACC.3
009A	289F	jmp     _L210
009B	54A7	inc     a[0]
009C	3D0A	sz      Z
009D	54A8	inc     a[1]
009E	2893	jmp     _L14
				_L210:
009F	5F27	clr     a[0]
00A0	5F28	clr     a[1]
				_L16:
00A1	0F0F	mov     a, FH
00A2	4227	sub     a, a[0]
00A3	0F27	mov     a, 27H
00A4	5228	sbc     a, a[1]
00A5	1185	swap    ACC
00A6	040A	xor     a, STATUS
00A7	3D85	sz      ACC.3
00A8	28AD	jmp     _L211
00A9	54A7	inc     a[0]
00AA	3D0A	sz      Z
00AB	54A8	inc     a[1]
00AC	28A1	jmp     _L16
				;34		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L211:
00AD	5F27	clr     a[0]
00AE	5F28	clr     a[1]
				_L18:
00AF	0F0F	mov     a, FH
00B0	4227	sub     a, a[0]
00B1	0F27	mov     a, 27H
00B2	5228	sbc     a, a[1]
00B3	1185	swap    ACC
00B4	040A	xor     a, STATUS
00B5	3D85	sz      ACC.3
00B6	28BB	jmp     _L212
00B7	54A7	inc     a[0]
00B8	3D0A	sz      Z
00B9	54A8	inc     a[1]
00BA	28AF	jmp     _L18
				_L212:
00BB	5F27	clr     a[0]
00BC	5F28	clr     a[1]
				_L20:
00BD	0F0F	mov     a, FH
00BE	4227	sub     a, a[0]
00BF	0F27	mov     a, 27H
00C0	5228	sbc     a, a[1]
00C1	1185	swap    ACC
00C2	040A	xor     a, STATUS
00C3	3D85	sz      ACC.3
00C4	28C9	jmp     _L213
00C5	54A7	inc     a[0]
00C6	3D0A	sz      Z
00C7	54A8	inc     a[1]
00C8	28BD	jmp     _L20
				_L213:
00C9	5F27	clr     a[0]
00CA	5F28	clr     a[1]
				_L22:
00CB	0F0F	mov     a, FH
00CC	4227	sub     a, a[0]
00CD	0F27	mov     a, 27H
00CE	5228	sbc     a, a[1]
00CF	1185	swap    ACC
00D0	040A	xor     a, STATUS
00D1	3D85	sz      ACC.3
00D2	28D7	jmp     _L214
00D3	54A7	inc     a[0]
00D4	3D0A	sz      Z
00D5	54A8	inc     a[1]
00D6	28CB	jmp     _L22
				;35		for(a=0; a<10000; a++);
				_L214:
00D7	5F27	clr     a[0]
00D8	5F28	clr     a[1]
				_L24:
00D9	0F0F	mov     a, FH
00DA	4227	sub     a, a[0]
00DB	0F27	mov     a, 27H
00DC	5228	sbc     a, a[1]
00DD	1185	swap    ACC
00DE	040A	xor     a, STATUS
00DF	3D85	sz      ACC.3
00E0	28E5	jmp     _L215
00E1	54A7	inc     a[0]
00E2	3D0A	sz      Z
00E3	54A8	inc     a[1]
00E4	28D9	jmp     _L24
				;36		for(a=0; a<10000; a++);
				_L215:
00E5	5F27	clr     a[0]
00E6	5F28	clr     a[1]
				_L26:
00E7	0F0F	mov     a, FH
00E8	4227	sub     a, a[0]
00E9	0F27	mov     a, 27H
00EA	5228	sbc     a, a[1]
00EB	1185	swap    ACC
00EC	040A	xor     a, STATUS
00ED	3D85	sz      ACC.3
00EE	28F3	jmp     _L216
00EF	54A7	inc     a[0]
00F0	3D0A	sz      Z
00F1	54A8	inc     a[1]
00F2	28E7	jmp     _L26
				;37		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L216:
00F3	5F27	clr     a[0]
00F4	5F28	clr     a[1]
				_L28:
00F5	0F0F	mov     a, FH
00F6	4227	sub     a, a[0]
00F7	0F27	mov     a, 27H
00F8	5228	sbc     a, a[1]
00F9	1185	swap    ACC
00FA	040A	xor     a, STATUS
00FB	3D85	sz      ACC.3
00FC	2901	jmp     _L217
00FD	54A7	inc     a[0]
00FE	3D0A	sz      Z
00FF	54A8	inc     a[1]
0100	28F5	jmp     _L28
				_L217:
0101	5F27	clr     a[0]
0102	5F28	clr     a[1]
				_L30:
0103	0F0F	mov     a, FH
0104	4227	sub     a, a[0]
0105	0F27	mov     a, 27H
0106	5228	sbc     a, a[1]
0107	1185	swap    ACC
0108	040A	xor     a, STATUS
0109	3D85	sz      ACC.3
010A	290F	jmp     _L218
010B	54A7	inc     a[0]
010C	3D0A	sz      Z
010D	54A8	inc     a[1]
010E	2903	jmp     _L30
				;38		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L218:
010F	5F27	clr     a[0]
0110	5F28	clr     a[1]
				_L32:
0111	0F0F	mov     a, FH
0112	4227	sub     a, a[0]
0113	0F27	mov     a, 27H
0114	5228	sbc     a, a[1]
0115	1185	swap    ACC
0116	040A	xor     a, STATUS
0117	3D85	sz      ACC.3
0118	291D	jmp     _L219
0119	54A7	inc     a[0]
011A	3D0A	sz      Z
011B	54A8	inc     a[1]
011C	2911	jmp     _L32
				_L219:
011D	5F27	clr     a[0]
011E	5F28	clr     a[1]
				_L34:
011F	0F0F	mov     a, FH
0120	4227	sub     a, a[0]
0121	0F27	mov     a, 27H
0122	5228	sbc     a, a[1]
0123	1185	swap    ACC
0124	040A	xor     a, STATUS
0125	3D85	sz      ACC.3
0126	292B	jmp     _L220
0127	54A7	inc     a[0]
0128	3D0A	sz      Z
0129	54A8	inc     a[1]
012A	291F	jmp     _L34
				;39		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L220:
012B	5F27	clr     a[0]
012C	5F28	clr     a[1]
				_L36:
012D	0F0F	mov     a, FH
012E	4227	sub     a, a[0]
012F	0F27	mov     a, 27H
0130	5228	sbc     a, a[1]
0131	1185	swap    ACC
0132	040A	xor     a, STATUS
0133	3D85	sz      ACC.3
0134	2939	jmp     _L221
0135	54A7	inc     a[0]
0136	3D0A	sz      Z
0137	54A8	inc     a[1]
0138	292D	jmp     _L36
				_L221:
0139	5F27	clr     a[0]
013A	5F28	clr     a[1]
				_L38:
013B	0F0F	mov     a, FH
013C	4227	sub     a, a[0]
013D	0F27	mov     a, 27H
013E	5228	sbc     a, a[1]
013F	1185	swap    ACC
0140	040A	xor     a, STATUS
0141	3D85	sz      ACC.3
0142	2947	jmp     _L222
0143	54A7	inc     a[0]
0144	3D0A	sz      Z
0145	54A8	inc     a[1]
0146	293B	jmp     _L38
				_L222:
0147	5F27	clr     a[0]
0148	5F28	clr     a[1]
				_L40:
0149	0F0F	mov     a, FH
014A	4227	sub     a, a[0]
014B	0F27	mov     a, 27H
014C	5228	sbc     a, a[1]
014D	1185	swap    ACC
014E	040A	xor     a, STATUS
014F	3D85	sz      ACC.3
0150	2955	jmp     _L223
0151	54A7	inc     a[0]
0152	3D0A	sz      Z
0153	54A8	inc     a[1]
0154	2949	jmp     _L40
				;40		for(a=0; a<10000; a++);
				_L223:
0155	5F27	clr     a[0]
0156	5F28	clr     a[1]
				_L42:
0157	0F0F	mov     a, FH
0158	4227	sub     a, a[0]
0159	0F27	mov     a, 27H
015A	5228	sbc     a, a[1]
015B	1185	swap    ACC
015C	040A	xor     a, STATUS
015D	3D85	sz      ACC.3
015E	2963	jmp     _L224
015F	54A7	inc     a[0]
0160	3D0A	sz      Z
0161	54A8	inc     a[1]
0162	2957	jmp     _L42
				;41		for(a=0; a<10000; a++);
				_L224:
0163	5F27	clr     a[0]
0164	5F28	clr     a[1]
				_L44:
0165	0F0F	mov     a, FH
0166	4227	sub     a, a[0]
0167	0F27	mov     a, 27H
0168	5228	sbc     a, a[1]
0169	1185	swap    ACC
016A	040A	xor     a, STATUS
016B	3D85	sz      ACC.3
016C	2971	jmp     _L225
016D	54A7	inc     a[0]
016E	3D0A	sz      Z
016F	54A8	inc     a[1]
0170	2965	jmp     _L44
				;42		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L225:
0171	5F27	clr     a[0]
0172	5F28	clr     a[1]
				_L46:
0173	0F0F	mov     a, FH
0174	4227	sub     a, a[0]
0175	0F27	mov     a, 27H
0176	5228	sbc     a, a[1]
0177	1185	swap    ACC
0178	040A	xor     a, STATUS
0179	3D85	sz      ACC.3
017A	297F	jmp     _L226
017B	54A7	inc     a[0]
017C	3D0A	sz      Z
017D	54A8	inc     a[1]
017E	2973	jmp     _L46
				_L226:
017F	5F27	clr     a[0]
0180	5F28	clr     a[1]
				_L48:
0181	0F0F	mov     a, FH
0182	4227	sub     a, a[0]
0183	0F27	mov     a, 27H
0184	5228	sbc     a, a[1]
0185	1185	swap    ACC
0186	040A	xor     a, STATUS
0187	3D85	sz      ACC.3
0188	298D	jmp     _L227
0189	54A7	inc     a[0]
018A	3D0A	sz      Z
018B	54A8	inc     a[1]
018C	2981	jmp     _L48
				;43		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L227:
018D	5F27	clr     a[0]
018E	5F28	clr     a[1]
				_L50:
018F	0F0F	mov     a, FH
0190	4227	sub     a, a[0]
0191	0F27	mov     a, 27H
0192	5228	sbc     a, a[1]
0193	1185	swap    ACC
0194	040A	xor     a, STATUS
0195	3D85	sz      ACC.3
0196	299B	jmp     _L228
0197	54A7	inc     a[0]
0198	3D0A	sz      Z
0199	54A8	inc     a[1]
019A	298F	jmp     _L50
				_L228:
019B	5F27	clr     a[0]
019C	5F28	clr     a[1]
				_L52:
019D	0F0F	mov     a, FH
019E	4227	sub     a, a[0]
019F	0F27	mov     a, 27H
01A0	5228	sbc     a, a[1]
01A1	1185	swap    ACC
01A2	040A	xor     a, STATUS
01A3	3D85	sz      ACC.3
01A4	29A9	jmp     _L229
01A5	54A7	inc     a[0]
01A6	3D0A	sz      Z
01A7	54A8	inc     a[1]
01A8	299D	jmp     _L52
				;44		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L229:
01A9	5F27	clr     a[0]
01AA	5F28	clr     a[1]
				_L54:
01AB	0F0F	mov     a, FH
01AC	4227	sub     a, a[0]
01AD	0F27	mov     a, 27H
01AE	5228	sbc     a, a[1]
01AF	1185	swap    ACC
01B0	040A	xor     a, STATUS
01B1	3D85	sz      ACC.3
01B2	29B7	jmp     _L230
01B3	54A7	inc     a[0]
01B4	3D0A	sz      Z
01B5	54A8	inc     a[1]
01B6	29AB	jmp     _L54
				_L230:
01B7	5F27	clr     a[0]
01B8	5F28	clr     a[1]
				_L56:
01B9	0F0F	mov     a, FH
01BA	4227	sub     a, a[0]
01BB	0F27	mov     a, 27H
01BC	5228	sbc     a, a[1]
01BD	1185	swap    ACC
01BE	040A	xor     a, STATUS
01BF	3D85	sz      ACC.3
01C0	29C5	jmp     _L231
01C1	54A7	inc     a[0]
01C2	3D0A	sz      Z
01C3	54A8	inc     a[1]
01C4	29B9	jmp     _L56
				_L231:
01C5	5F27	clr     a[0]
01C6	5F28	clr     a[1]
				_L58:
01C7	0F0F	mov     a, FH
01C8	4227	sub     a, a[0]
01C9	0F27	mov     a, 27H
01CA	5228	sbc     a, a[1]
01CB	1185	swap    ACC
01CC	040A	xor     a, STATUS
01CD	3D85	sz      ACC.3
01CE	29D3	jmp     _L232
01CF	54A7	inc     a[0]
01D0	3D0A	sz      Z
01D1	54A8	inc     a[1]
01D2	29C7	jmp     _L58
				;45		for(a=0; a<10000; a++);
				_L232:
01D3	5F27	clr     a[0]
01D4	5F28	clr     a[1]
				_L60:
01D5	0F0F	mov     a, FH
01D6	4227	sub     a, a[0]
01D7	0F27	mov     a, 27H
01D8	5228	sbc     a, a[1]
01D9	1185	swap    ACC
01DA	040A	xor     a, STATUS
01DB	3D85	sz      ACC.3
01DC	29E1	jmp     _L233
01DD	54A7	inc     a[0]
01DE	3D0A	sz      Z
01DF	54A8	inc     a[1]
01E0	29D5	jmp     _L60
				;46		for(a=0; a<10000; a++);
				_L233:
01E1	5F27	clr     a[0]
01E2	5F28	clr     a[1]
				_L62:
01E3	0F0F	mov     a, FH
01E4	4227	sub     a, a[0]
01E5	0F27	mov     a, 27H
01E6	5228	sbc     a, a[1]
01E7	1185	swap    ACC
01E8	040A	xor     a, STATUS
01E9	3D85	sz      ACC.3
01EA	29EF	jmp     _L234
01EB	54A7	inc     a[0]
01EC	3D0A	sz      Z
01ED	54A8	inc     a[1]
01EE	29E3	jmp     _L62
				;47		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L234:
01EF	5F27	clr     a[0]
01F0	5F28	clr     a[1]
				_L64:
01F1	0F0F	mov     a, FH
01F2	4227	sub     a, a[0]
01F3	0F27	mov     a, 27H
01F4	5228	sbc     a, a[1]
01F5	1185	swap    ACC
01F6	040A	xor     a, STATUS
01F7	3D85	sz      ACC.3
01F8	29FD	jmp     _L235
01F9	54A7	inc     a[0]
01FA	3D0A	sz      Z
01FB	54A8	inc     a[1]
01FC	29F1	jmp     _L64
				_L235:
01FD	5F27	clr     a[0]
01FE	5F28	clr     a[1]
				_L66:
01FF	0F0F	mov     a, FH
0200	4227	sub     a, a[0]
0201	0F27	mov     a, 27H
0202	5228	sbc     a, a[1]
0203	1185	swap    ACC
0204	040A	xor     a, STATUS
0205	3D85	sz      ACC.3
0206	2A0B	jmp     _L236
0207	54A7	inc     a[0]
0208	3D0A	sz      Z
0209	54A8	inc     a[1]
020A	29FF	jmp     _L66
				;48		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L236:
020B	5F27	clr     a[0]
020C	5F28	clr     a[1]
				_L68:
020D	0F0F	mov     a, FH
020E	4227	sub     a, a[0]
020F	0F27	mov     a, 27H
0210	5228	sbc     a, a[1]
0211	1185	swap    ACC
0212	040A	xor     a, STATUS
0213	3D85	sz      ACC.3
0214	2A19	jmp     _L237
0215	54A7	inc     a[0]
0216	3D0A	sz      Z
0217	54A8	inc     a[1]
0218	2A0D	jmp     _L68
				_L237:
0219	5F27	clr     a[0]
021A	5F28	clr     a[1]
				_L70:
021B	0F0F	mov     a, FH
021C	4227	sub     a, a[0]
021D	0F27	mov     a, 27H
021E	5228	sbc     a, a[1]
021F	1185	swap    ACC
0220	040A	xor     a, STATUS
0221	3D85	sz      ACC.3
0222	2A27	jmp     _L238
0223	54A7	inc     a[0]
0224	3D0A	sz      Z
0225	54A8	inc     a[1]
0226	2A1B	jmp     _L70
				;49		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L238:
0227	5F27	clr     a[0]
0228	5F28	clr     a[1]
				_L72:
0229	0F0F	mov     a, FH
022A	4227	sub     a, a[0]
022B	0F27	mov     a, 27H
022C	5228	sbc     a, a[1]
022D	1185	swap    ACC
022E	040A	xor     a, STATUS
022F	3D85	sz      ACC.3
0230	2A35	jmp     _L239
0231	54A7	inc     a[0]
0232	3D0A	sz      Z
0233	54A8	inc     a[1]
0234	2A29	jmp     _L72
				_L239:
0235	5F27	clr     a[0]
0236	5F28	clr     a[1]
				_L74:
0237	0F0F	mov     a, FH
0238	4227	sub     a, a[0]
0239	0F27	mov     a, 27H
023A	5228	sbc     a, a[1]
023B	1185	swap    ACC
023C	040A	xor     a, STATUS
023D	3D85	sz      ACC.3
023E	2A43	jmp     _L240
023F	54A7	inc     a[0]
0240	3D0A	sz      Z
0241	54A8	inc     a[1]
0242	2A37	jmp     _L74
				_L240:
0243	5F27	clr     a[0]
0244	5F28	clr     a[1]
				_L76:
0245	0F0F	mov     a, FH
0246	4227	sub     a, a[0]
0247	0F27	mov     a, 27H
0248	5228	sbc     a, a[1]
0249	1185	swap    ACC
024A	040A	xor     a, STATUS
024B	3D85	sz      ACC.3
024C	2A51	jmp     _L241
024D	54A7	inc     a[0]
024E	3D0A	sz      Z
024F	54A8	inc     a[1]
0250	2A45	jmp     _L76
				;50		for(a=0; a<10000; a++);
				_L241:
0251	5F27	clr     a[0]
0252	5F28	clr     a[1]
				_L78:
0253	0F0F	mov     a, FH
0254	4227	sub     a, a[0]
0255	0F27	mov     a, 27H
0256	5228	sbc     a, a[1]
0257	1185	swap    ACC
0258	040A	xor     a, STATUS
0259	3D85	sz      ACC.3
025A	2A5F	jmp     _L242
025B	54A7	inc     a[0]
025C	3D0A	sz      Z
025D	54A8	inc     a[1]
025E	2A53	jmp     _L78
				;51		for(a=0; a<10000; a++);
				_L242:
025F	5F27	clr     a[0]
0260	5F28	clr     a[1]
				_L80:
0261	0F0F	mov     a, FH
0262	4227	sub     a, a[0]
0263	0F27	mov     a, 27H
0264	5228	sbc     a, a[1]
0265	1185	swap    ACC
0266	040A	xor     a, STATUS
0267	3D85	sz      ACC.3
0268	2A6D	jmp     _L243
0269	54A7	inc     a[0]
026A	3D0A	sz      Z
026B	54A8	inc     a[1]
026C	2A61	jmp     _L80
				;52		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L243:
026D	5F27	clr     a[0]
026E	5F28	clr     a[1]
				_L82:
026F	0F0F	mov     a, FH
0270	4227	sub     a, a[0]
0271	0F27	mov     a, 27H
0272	5228	sbc     a, a[1]
0273	1185	swap    ACC
0274	040A	xor     a, STATUS
0275	3D85	sz      ACC.3
0276	2A7B	jmp     _L244
0277	54A7	inc     a[0]
0278	3D0A	sz      Z
0279	54A8	inc     a[1]
027A	2A6F	jmp     _L82
				_L244:
027B	5F27	clr     a[0]
027C	5F28	clr     a[1]
				_L84:
027D	0F0F	mov     a, FH
027E	4227	sub     a, a[0]
027F	0F27	mov     a, 27H
0280	5228	sbc     a, a[1]
0281	1185	swap    ACC
0282	040A	xor     a, STATUS
0283	3D85	sz      ACC.3
0284	2A89	jmp     _L245
0285	54A7	inc     a[0]
0286	3D0A	sz      Z
0287	54A8	inc     a[1]
0288	2A7D	jmp     _L84
				;53		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L245:
0289	5F27	clr     a[0]
028A	5F28	clr     a[1]
				_L86:
028B	0F0F	mov     a, FH
028C	4227	sub     a, a[0]
028D	0F27	mov     a, 27H
028E	5228	sbc     a, a[1]
028F	1185	swap    ACC
0290	040A	xor     a, STATUS
0291	3D85	sz      ACC.3
0292	2A97	jmp     _L246
0293	54A7	inc     a[0]
0294	3D0A	sz      Z
0295	54A8	inc     a[1]
0296	2A8B	jmp     _L86
				_L246:
0297	5F27	clr     a[0]
0298	5F28	clr     a[1]
				_L88:
0299	0F0F	mov     a, FH
029A	4227	sub     a, a[0]
029B	0F27	mov     a, 27H
029C	5228	sbc     a, a[1]
029D	1185	swap    ACC
029E	040A	xor     a, STATUS
029F	3D85	sz      ACC.3
02A0	2AA5	jmp     _L247
02A1	54A7	inc     a[0]
02A2	3D0A	sz      Z
02A3	54A8	inc     a[1]
02A4	2A99	jmp     _L88
				;54		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L247:
02A5	5F27	clr     a[0]
02A6	5F28	clr     a[1]
				_L90:
02A7	0F0F	mov     a, FH
02A8	4227	sub     a, a[0]
02A9	0F27	mov     a, 27H
02AA	5228	sbc     a, a[1]
02AB	1185	swap    ACC
02AC	040A	xor     a, STATUS
02AD	3D85	sz      ACC.3
02AE	2AB3	jmp     _L248
02AF	54A7	inc     a[0]
02B0	3D0A	sz      Z
02B1	54A8	inc     a[1]
02B2	2AA7	jmp     _L90
				_L248:
02B3	5F27	clr     a[0]
02B4	5F28	clr     a[1]
				_L92:
02B5	0F0F	mov     a, FH
02B6	4227	sub     a, a[0]
02B7	0F27	mov     a, 27H
02B8	5228	sbc     a, a[1]
02B9	1185	swap    ACC
02BA	040A	xor     a, STATUS
02BB	3D85	sz      ACC.3
02BC	2AC1	jmp     _L249
02BD	54A7	inc     a[0]
02BE	3D0A	sz      Z
02BF	54A8	inc     a[1]
02C0	2AB5	jmp     _L92
				_L249:
02C1	5F27	clr     a[0]
02C2	5F28	clr     a[1]
				_L94:
02C3	0F0F	mov     a, FH
02C4	4227	sub     a, a[0]
02C5	0F27	mov     a, 27H
02C6	5228	sbc     a, a[1]
02C7	1185	swap    ACC
02C8	040A	xor     a, STATUS
02C9	3D85	sz      ACC.3
02CA	2ACF	jmp     _L250
02CB	54A7	inc     a[0]
02CC	3D0A	sz      Z
02CD	54A8	inc     a[1]
02CE	2AC3	jmp     _L94
				;55		for(a=0; a<10000; a++);
				_L250:
02CF	5F27	clr     a[0]
02D0	5F28	clr     a[1]
				_L96:
02D1	0F0F	mov     a, FH
02D2	4227	sub     a, a[0]
02D3	0F27	mov     a, 27H
02D4	5228	sbc     a, a[1]
02D5	1185	swap    ACC
02D6	040A	xor     a, STATUS
02D7	3D85	sz      ACC.3
02D8	2ADD	jmp     _L251
02D9	54A7	inc     a[0]
02DA	3D0A	sz      Z
02DB	54A8	inc     a[1]
02DC	2AD1	jmp     _L96
				;56		for(a=0; a<10000; a++);
				_L251:
02DD	5F27	clr     a[0]
02DE	5F28	clr     a[1]
				_L98:
02DF	0F0F	mov     a, FH
02E0	4227	sub     a, a[0]
02E1	0F27	mov     a, 27H
02E2	5228	sbc     a, a[1]
02E3	1185	swap    ACC
02E4	040A	xor     a, STATUS
02E5	3D85	sz      ACC.3
02E6	2AEB	jmp     _L252
02E7	54A7	inc     a[0]
02E8	3D0A	sz      Z
02E9	54A8	inc     a[1]
02EA	2ADF	jmp     _L98
				;57		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L252:
02EB	5F27	clr     a[0]
02EC	5F28	clr     a[1]
				_L100:
02ED	0F0F	mov     a, FH
02EE	4227	sub     a, a[0]
02EF	0F27	mov     a, 27H
02F0	5228	sbc     a, a[1]
02F1	1185	swap    ACC
02F2	040A	xor     a, STATUS
02F3	3D85	sz      ACC.3
02F4	2AF9	jmp     _L253
02F5	54A7	inc     a[0]
02F6	3D0A	sz      Z
02F7	54A8	inc     a[1]
02F8	2AED	jmp     _L100
				_L253:
02F9	5F27	clr     a[0]
02FA	5F28	clr     a[1]
				_L102:
02FB	0F0F	mov     a, FH
02FC	4227	sub     a, a[0]
02FD	0F27	mov     a, 27H
02FE	5228	sbc     a, a[1]
02FF	1185	swap    ACC
0300	040A	xor     a, STATUS
0301	3D85	sz      ACC.3
0302	2B07	jmp     _L254
0303	54A7	inc     a[0]
0304	3D0A	sz      Z
0305	54A8	inc     a[1]
0306	2AFB	jmp     _L102
				;58		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L254:
0307	5F27	clr     a[0]
0308	5F28	clr     a[1]
				_L104:
0309	0F0F	mov     a, FH
030A	4227	sub     a, a[0]
030B	0F27	mov     a, 27H
030C	5228	sbc     a, a[1]
030D	1185	swap    ACC
030E	040A	xor     a, STATUS
030F	3D85	sz      ACC.3
0310	2B15	jmp     _L255
0311	54A7	inc     a[0]
0312	3D0A	sz      Z
0313	54A8	inc     a[1]
0314	2B09	jmp     _L104
				_L255:
0315	5F27	clr     a[0]
0316	5F28	clr     a[1]
				_L106:
0317	0F0F	mov     a, FH
0318	4227	sub     a, a[0]
0319	0F27	mov     a, 27H
031A	5228	sbc     a, a[1]
031B	1185	swap    ACC
031C	040A	xor     a, STATUS
031D	3D85	sz      ACC.3
031E	2B23	jmp     _L256
031F	54A7	inc     a[0]
0320	3D0A	sz      Z
0321	54A8	inc     a[1]
0322	2B17	jmp     _L106
				;59		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L256:
0323	5F27	clr     a[0]
0324	5F28	clr     a[1]
				_L108:
0325	0F0F	mov     a, FH
0326	4227	sub     a, a[0]
0327	0F27	mov     a, 27H
0328	5228	sbc     a, a[1]
0329	1185	swap    ACC
032A	040A	xor     a, STATUS
032B	3D85	sz      ACC.3
032C	2B31	jmp     _L257
032D	54A7	inc     a[0]
032E	3D0A	sz      Z
032F	54A8	inc     a[1]
0330	2B25	jmp     _L108
				_L257:
0331	5F27	clr     a[0]
0332	5F28	clr     a[1]
				_L110:
0333	0F0F	mov     a, FH
0334	4227	sub     a, a[0]
0335	0F27	mov     a, 27H
0336	5228	sbc     a, a[1]
0337	1185	swap    ACC
0338	040A	xor     a, STATUS
0339	3D85	sz      ACC.3
033A	2B3F	jmp     _L258
033B	54A7	inc     a[0]
033C	3D0A	sz      Z
033D	54A8	inc     a[1]
033E	2B33	jmp     _L110
				_L258:
033F	5F27	clr     a[0]
0340	5F28	clr     a[1]
				_L112:
0341	0F0F	mov     a, FH
0342	4227	sub     a, a[0]
0343	0F27	mov     a, 27H
0344	5228	sbc     a, a[1]
0345	1185	swap    ACC
0346	040A	xor     a, STATUS
0347	3D85	sz      ACC.3
0348	2B4D	jmp     _L259
0349	54A7	inc     a[0]
034A	3D0A	sz      Z
034B	54A8	inc     a[1]
034C	2B41	jmp     _L112
				;60		for(a=0; a<10000; a++);
				_L259:
034D	5F27	clr     a[0]
034E	5F28	clr     a[1]
				_L114:
034F	0F0F	mov     a, FH
0350	4227	sub     a, a[0]
0351	0F27	mov     a, 27H
0352	5228	sbc     a, a[1]
0353	1185	swap    ACC
0354	040A	xor     a, STATUS
0355	3D85	sz      ACC.3
0356	2B5B	jmp     _L260
0357	54A7	inc     a[0]
0358	3D0A	sz      Z
0359	54A8	inc     a[1]
035A	2B4F	jmp     _L114
				;61		for(a=0; a<10000; a++);
				_L260:
035B	5F27	clr     a[0]
035C	5F28	clr     a[1]
				_L116:
035D	0F0F	mov     a, FH
035E	4227	sub     a, a[0]
035F	0F27	mov     a, 27H
0360	5228	sbc     a, a[1]
0361	1185	swap    ACC
0362	040A	xor     a, STATUS
0363	3D85	sz      ACC.3
0364	2B69	jmp     _L261
0365	54A7	inc     a[0]
0366	3D0A	sz      Z
0367	54A8	inc     a[1]
0368	2B5D	jmp     _L116
				;62		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L261:
0369	5F27	clr     a[0]
036A	5F28	clr     a[1]
				_L118:
036B	0F0F	mov     a, FH
036C	4227	sub     a, a[0]
036D	0F27	mov     a, 27H
036E	5228	sbc     a, a[1]
036F	1185	swap    ACC
0370	040A	xor     a, STATUS
0371	3D85	sz      ACC.3
0372	2B77	jmp     _L262
0373	54A7	inc     a[0]
0374	3D0A	sz      Z
0375	54A8	inc     a[1]
0376	2B6B	jmp     _L118
				_L262:
0377	5F27	clr     a[0]
0378	5F28	clr     a[1]
				_L120:
0379	0F0F	mov     a, FH
037A	4227	sub     a, a[0]
037B	0F27	mov     a, 27H
037C	5228	sbc     a, a[1]
037D	1185	swap    ACC
037E	040A	xor     a, STATUS
037F	3D85	sz      ACC.3
0380	2B85	jmp     _L263
0381	54A7	inc     a[0]
0382	3D0A	sz      Z
0383	54A8	inc     a[1]
0384	2B79	jmp     _L120
				;63		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L263:
0385	5F27	clr     a[0]
0386	5F28	clr     a[1]
				_L122:
0387	0F0F	mov     a, FH
0388	4227	sub     a, a[0]
0389	0F27	mov     a, 27H
038A	5228	sbc     a, a[1]
038B	1185	swap    ACC
038C	040A	xor     a, STATUS
038D	3D85	sz      ACC.3
038E	2B93	jmp     _L264
038F	54A7	inc     a[0]
0390	3D0A	sz      Z
0391	54A8	inc     a[1]
0392	2B87	jmp     _L122
				_L264:
0393	5F27	clr     a[0]
0394	5F28	clr     a[1]
				_L124:
0395	0F0F	mov     a, FH
0396	4227	sub     a, a[0]
0397	0F27	mov     a, 27H
0398	5228	sbc     a, a[1]
0399	1185	swap    ACC
039A	040A	xor     a, STATUS
039B	3D85	sz      ACC.3
039C	2BA1	jmp     _L265
039D	54A7	inc     a[0]
039E	3D0A	sz      Z
039F	54A8	inc     a[1]
03A0	2B95	jmp     _L124
				;64		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L265:
03A1	5F27	clr     a[0]
03A2	5F28	clr     a[1]
				_L126:
03A3	0F0F	mov     a, FH
03A4	4227	sub     a, a[0]
03A5	0F27	mov     a, 27H
03A6	5228	sbc     a, a[1]
03A7	1185	swap    ACC
03A8	040A	xor     a, STATUS
03A9	3D85	sz      ACC.3
03AA	2BAF	jmp     _L266
03AB	54A7	inc     a[0]
03AC	3D0A	sz      Z
03AD	54A8	inc     a[1]
03AE	2BA3	jmp     _L126
				_L266:
03AF	5F27	clr     a[0]
03B0	5F28	clr     a[1]
				_L128:
03B1	0F0F	mov     a, FH
03B2	4227	sub     a, a[0]
03B3	0F27	mov     a, 27H
03B4	5228	sbc     a, a[1]
03B5	1185	swap    ACC
03B6	040A	xor     a, STATUS
03B7	3D85	sz      ACC.3
03B8	2BBD	jmp     _L267
03B9	54A7	inc     a[0]
03BA	3D0A	sz      Z
03BB	54A8	inc     a[1]
03BC	2BB1	jmp     _L128
				_L267:
03BD	5F27	clr     a[0]
03BE	5F28	clr     a[1]
				_L130:
03BF	0F0F	mov     a, FH
03C0	4227	sub     a, a[0]
03C1	0F27	mov     a, 27H
03C2	5228	sbc     a, a[1]
03C3	1185	swap    ACC
03C4	040A	xor     a, STATUS
03C5	3D85	sz      ACC.3
03C6	2BCB	jmp     _L268
03C7	54A7	inc     a[0]
03C8	3D0A	sz      Z
03C9	54A8	inc     a[1]
03CA	2BBF	jmp     _L130
				;65		for(a=0; a<10000; a++);
				_L268:
03CB	5F27	clr     a[0]
03CC	5F28	clr     a[1]
				_L132:
03CD	0F0F	mov     a, FH
03CE	4227	sub     a, a[0]
03CF	0F27	mov     a, 27H
03D0	5228	sbc     a, a[1]
03D1	1185	swap    ACC
03D2	040A	xor     a, STATUS
03D3	3D85	sz      ACC.3
03D4	2BD9	jmp     _L269
03D5	54A7	inc     a[0]
03D6	3D0A	sz      Z
03D7	54A8	inc     a[1]
03D8	2BCD	jmp     _L132
				;66		for(a=0; a<10000; a++);
				_L269:
03D9	5F27	clr     a[0]
03DA	5F28	clr     a[1]
				_L134:
03DB	0F0F	mov     a, FH
03DC	4227	sub     a, a[0]
03DD	0F27	mov     a, 27H
03DE	5228	sbc     a, a[1]
03DF	1185	swap    ACC
03E0	040A	xor     a, STATUS
03E1	3D85	sz      ACC.3
03E2	2BE7	jmp     _L270
03E3	54A7	inc     a[0]
03E4	3D0A	sz      Z
03E5	54A8	inc     a[1]
03E6	2BDB	jmp     _L134
				;67		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L270:
03E7	5F27	clr     a[0]
03E8	5F28	clr     a[1]
				_L136:
03E9	0F0F	mov     a, FH
03EA	4227	sub     a, a[0]
03EB	0F27	mov     a, 27H
03EC	5228	sbc     a, a[1]
03ED	1185	swap    ACC
03EE	040A	xor     a, STATUS
03EF	3D85	sz      ACC.3
03F0	2BF5	jmp     _L271
03F1	54A7	inc     a[0]
03F2	3D0A	sz      Z
03F3	54A8	inc     a[1]
03F4	2BE9	jmp     _L136
				_L271:
03F5	5F27	clr     a[0]
03F6	5F28	clr     a[1]
				_L138:
03F7	0F0F	mov     a, FH
03F8	4227	sub     a, a[0]
03F9	0F27	mov     a, 27H
03FA	5228	sbc     a, a[1]
03FB	1185	swap    ACC
03FC	040A	xor     a, STATUS
03FD	3D85	sz      ACC.3
03FE	2C03	jmp     _L272
03FF	54A7	inc     a[0]
0400	3D0A	sz      Z
0401	54A8	inc     a[1]
0402	2BF7	jmp     _L138
				;68		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L272:
0403	5F27	clr     a[0]
0404	5F28	clr     a[1]
				_L140:
0405	0F0F	mov     a, FH
0406	4227	sub     a, a[0]
0407	0F27	mov     a, 27H
0408	5228	sbc     a, a[1]
0409	1185	swap    ACC
040A	040A	xor     a, STATUS
040B	3D85	sz      ACC.3
040C	2C11	jmp     _L273
040D	54A7	inc     a[0]
040E	3D0A	sz      Z
040F	54A8	inc     a[1]
0410	2C05	jmp     _L140
				_L273:
0411	5F27	clr     a[0]
0412	5F28	clr     a[1]
				_L142:
0413	0F0F	mov     a, FH
0414	4227	sub     a, a[0]
0415	0F27	mov     a, 27H
0416	5228	sbc     a, a[1]
0417	1185	swap    ACC
0418	040A	xor     a, STATUS
0419	3D85	sz      ACC.3
041A	2C1F	jmp     _L274
041B	54A7	inc     a[0]
041C	3D0A	sz      Z
041D	54A8	inc     a[1]
041E	2C13	jmp     _L142
				;69		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L274:
041F	5F27	clr     a[0]
0420	5F28	clr     a[1]
				_L144:
0421	0F0F	mov     a, FH
0422	4227	sub     a, a[0]
0423	0F27	mov     a, 27H
0424	5228	sbc     a, a[1]
0425	1185	swap    ACC
0426	040A	xor     a, STATUS
0427	3D85	sz      ACC.3
0428	2C2D	jmp     _L275
0429	54A7	inc     a[0]
042A	3D0A	sz      Z
042B	54A8	inc     a[1]
042C	2C21	jmp     _L144
				_L275:
042D	5F27	clr     a[0]
042E	5F28	clr     a[1]
				_L146:
042F	0F0F	mov     a, FH
0430	4227	sub     a, a[0]
0431	0F27	mov     a, 27H
0432	5228	sbc     a, a[1]
0433	1185	swap    ACC
0434	040A	xor     a, STATUS
0435	3D85	sz      ACC.3
0436	2C3B	jmp     _L276
0437	54A7	inc     a[0]
0438	3D0A	sz      Z
0439	54A8	inc     a[1]
043A	2C2F	jmp     _L146
				_L276:
043B	5F27	clr     a[0]
043C	5F28	clr     a[1]
				_L148:
043D	0F0F	mov     a, FH
043E	4227	sub     a, a[0]
043F	0F27	mov     a, 27H
0440	5228	sbc     a, a[1]
0441	1185	swap    ACC
0442	040A	xor     a, STATUS
0443	3D85	sz      ACC.3
0444	2C49	jmp     _L277
0445	54A7	inc     a[0]
0446	3D0A	sz      Z
0447	54A8	inc     a[1]
0448	2C3D	jmp     _L148
				;70		for(a=0; a<10000; a++);
				_L277:
0449	5F27	clr     a[0]
044A	5F28	clr     a[1]
				_L150:
044B	0F0F	mov     a, FH
044C	4227	sub     a, a[0]
044D	0F27	mov     a, 27H
044E	5228	sbc     a, a[1]
044F	1185	swap    ACC
0450	040A	xor     a, STATUS
0451	3D85	sz      ACC.3
0452	2C57	jmp     _L278
0453	54A7	inc     a[0]
0454	3D0A	sz      Z
0455	54A8	inc     a[1]
0456	2C4B	jmp     _L150
				;71		for(a=0; a<10000; a++);
				_L278:
0457	5F27	clr     a[0]
0458	5F28	clr     a[1]
				_L152:
0459	0F0F	mov     a, FH
045A	4227	sub     a, a[0]
045B	0F27	mov     a, 27H
045C	5228	sbc     a, a[1]
045D	1185	swap    ACC
045E	040A	xor     a, STATUS
045F	3D85	sz      ACC.3
0460	2C65	jmp     _L279
0461	54A7	inc     a[0]
0462	3D0A	sz      Z
0463	54A8	inc     a[1]
0464	2C59	jmp     _L152
				;72		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L279:
0465	5F27	clr     a[0]
0466	5F28	clr     a[1]
				_L154:
0467	0F0F	mov     a, FH
0468	4227	sub     a, a[0]
0469	0F27	mov     a, 27H
046A	5228	sbc     a, a[1]
046B	1185	swap    ACC
046C	040A	xor     a, STATUS
046D	3D85	sz      ACC.3
046E	2C73	jmp     _L280
046F	54A7	inc     a[0]
0470	3D0A	sz      Z
0471	54A8	inc     a[1]
0472	2C67	jmp     _L154
				_L280:
0473	5F27	clr     a[0]
0474	5F28	clr     a[1]
				_L156:
0475	0F0F	mov     a, FH
0476	4227	sub     a, a[0]
0477	0F27	mov     a, 27H
0478	5228	sbc     a, a[1]
0479	1185	swap    ACC
047A	040A	xor     a, STATUS
047B	3D85	sz      ACC.3
047C	2C81	jmp     _L281
047D	54A7	inc     a[0]
047E	3D0A	sz      Z
047F	54A8	inc     a[1]
0480	2C75	jmp     _L156
				;73		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L281:
0481	5F27	clr     a[0]
0482	5F28	clr     a[1]
				_L158:
0483	0F0F	mov     a, FH
0484	4227	sub     a, a[0]
0485	0F27	mov     a, 27H
0486	5228	sbc     a, a[1]
0487	1185	swap    ACC
0488	040A	xor     a, STATUS
0489	3D85	sz      ACC.3
048A	2C8F	jmp     _L282
048B	54A7	inc     a[0]
048C	3D0A	sz      Z
048D	54A8	inc     a[1]
048E	2C83	jmp     _L158
				_L282:
048F	5F27	clr     a[0]
0490	5F28	clr     a[1]
				_L160:
0491	0F0F	mov     a, FH
0492	4227	sub     a, a[0]
0493	0F27	mov     a, 27H
0494	5228	sbc     a, a[1]
0495	1185	swap    ACC
0496	040A	xor     a, STATUS
0497	3D85	sz      ACC.3
0498	2C9D	jmp     _L283
0499	54A7	inc     a[0]
049A	3D0A	sz      Z
049B	54A8	inc     a[1]
049C	2C91	jmp     _L160
				;74		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L283:
049D	5F27	clr     a[0]
049E	5F28	clr     a[1]
				_L162:
049F	0F0F	mov     a, FH
04A0	4227	sub     a, a[0]
04A1	0F27	mov     a, 27H
04A2	5228	sbc     a, a[1]
04A3	1185	swap    ACC
04A4	040A	xor     a, STATUS
04A5	3D85	sz      ACC.3
04A6	2CAB	jmp     _L284
04A7	54A7	inc     a[0]
04A8	3D0A	sz      Z
04A9	54A8	inc     a[1]
04AA	2C9F	jmp     _L162
				_L284:
04AB	5F27	clr     a[0]
04AC	5F28	clr     a[1]
				_L164:
04AD	0F0F	mov     a, FH
04AE	4227	sub     a, a[0]
04AF	0F27	mov     a, 27H
04B0	5228	sbc     a, a[1]
04B1	1185	swap    ACC
04B2	040A	xor     a, STATUS
04B3	3D85	sz      ACC.3
04B4	2CB9	jmp     _L285
04B5	54A7	inc     a[0]
04B6	3D0A	sz      Z
04B7	54A8	inc     a[1]
04B8	2CAD	jmp     _L164
				_L285:
04B9	5F27	clr     a[0]
04BA	5F28	clr     a[1]
				_L166:
04BB	0F0F	mov     a, FH
04BC	4227	sub     a, a[0]
04BD	0F27	mov     a, 27H
04BE	5228	sbc     a, a[1]
04BF	1185	swap    ACC
04C0	040A	xor     a, STATUS
04C1	3D85	sz      ACC.3
04C2	2CC7	jmp     _L286
04C3	54A7	inc     a[0]
04C4	3D0A	sz      Z
04C5	54A8	inc     a[1]
04C6	2CBB	jmp     _L166
				;75		for(a=0; a<10000; a++);
				_L286:
04C7	5F27	clr     a[0]
04C8	5F28	clr     a[1]
				_L168:
04C9	0F0F	mov     a, FH
04CA	4227	sub     a, a[0]
04CB	0F27	mov     a, 27H
04CC	5228	sbc     a, a[1]
04CD	1185	swap    ACC
04CE	040A	xor     a, STATUS
04CF	3D85	sz      ACC.3
04D0	2CD5	jmp     _L287
04D1	54A7	inc     a[0]
04D2	3D0A	sz      Z
04D3	54A8	inc     a[1]
04D4	2CC9	jmp     _L168
				;76		for(a=0; a<10000; a++);
				_L287:
04D5	5F27	clr     a[0]
04D6	5F28	clr     a[1]
				_L170:
04D7	0F0F	mov     a, FH
04D8	4227	sub     a, a[0]
04D9	0F27	mov     a, 27H
04DA	5228	sbc     a, a[1]
04DB	1185	swap    ACC
04DC	040A	xor     a, STATUS
04DD	3D85	sz      ACC.3
04DE	2CE3	jmp     _L288
04DF	54A7	inc     a[0]
04E0	3D0A	sz      Z
04E1	54A8	inc     a[1]
04E2	2CD7	jmp     _L170
				;77		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L288:
04E3	5F27	clr     a[0]
04E4	5F28	clr     a[1]
				_L172:
04E5	0F0F	mov     a, FH
04E6	4227	sub     a, a[0]
04E7	0F27	mov     a, 27H
04E8	5228	sbc     a, a[1]
04E9	1185	swap    ACC
04EA	040A	xor     a, STATUS
04EB	3D85	sz      ACC.3
04EC	2CF1	jmp     _L289
04ED	54A7	inc     a[0]
04EE	3D0A	sz      Z
04EF	54A8	inc     a[1]
04F0	2CE5	jmp     _L172
				_L289:
04F1	5F27	clr     a[0]
04F2	5F28	clr     a[1]
				_L174:
04F3	0F0F	mov     a, FH
04F4	4227	sub     a, a[0]
04F5	0F27	mov     a, 27H
04F6	5228	sbc     a, a[1]
04F7	1185	swap    ACC
04F8	040A	xor     a, STATUS
04F9	3D85	sz      ACC.3
04FA	2CFF	jmp     _L290
04FB	54A7	inc     a[0]
04FC	3D0A	sz      Z
04FD	54A8	inc     a[1]
04FE	2CF3	jmp     _L174
				;78		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L290:
04FF	5F27	clr     a[0]
0500	5F28	clr     a[1]
				_L176:
0501	0F0F	mov     a, FH
0502	4227	sub     a, a[0]
0503	0F27	mov     a, 27H
0504	5228	sbc     a, a[1]
0505	1185	swap    ACC
0506	040A	xor     a, STATUS
0507	3D85	sz      ACC.3
0508	2D0D	jmp     _L291
0509	54A7	inc     a[0]
050A	3D0A	sz      Z
050B	54A8	inc     a[1]
050C	2D01	jmp     _L176
				_L291:
050D	5F27	clr     a[0]
050E	5F28	clr     a[1]
				_L178:
050F	0F0F	mov     a, FH
0510	4227	sub     a, a[0]
0511	0F27	mov     a, 27H
0512	5228	sbc     a, a[1]
0513	1185	swap    ACC
0514	040A	xor     a, STATUS
0515	3D85	sz      ACC.3
0516	2D1B	jmp     _L292
0517	54A7	inc     a[0]
0518	3D0A	sz      Z
0519	54A8	inc     a[1]
051A	2D0F	jmp     _L178
				;79		for(a=0; a<10000; a++);for(a=0; a<10000; a++);	for(a=0; a<10000; a++);
				_L292:
051B	5F27	clr     a[0]
051C	5F28	clr     a[1]
				_L180:
051D	0F0F	mov     a, FH
051E	4227	sub     a, a[0]
051F	0F27	mov     a, 27H
0520	5228	sbc     a, a[1]
0521	1185	swap    ACC
0522	040A	xor     a, STATUS
0523	3D85	sz      ACC.3
0524	2D29	jmp     _L293
0525	54A7	inc     a[0]
0526	3D0A	sz      Z
0527	54A8	inc     a[1]
0528	2D1D	jmp     _L180
				_L293:
0529	5F27	clr     a[0]
052A	5F28	clr     a[1]
				_L182:
052B	0F0F	mov     a, FH
052C	4227	sub     a, a[0]
052D	0F27	mov     a, 27H
052E	5228	sbc     a, a[1]
052F	1185	swap    ACC
0530	040A	xor     a, STATUS
0531	3D85	sz      ACC.3
0532	2D37	jmp     _L294
0533	54A7	inc     a[0]
0534	3D0A	sz      Z
0535	54A8	inc     a[1]
0536	2D2B	jmp     _L182
				_L294:
0537	5F27	clr     a[0]
0538	5F28	clr     a[1]
				_L184:
0539	0F0F	mov     a, FH
053A	4227	sub     a, a[0]
053B	0F27	mov     a, 27H
053C	5228	sbc     a, a[1]
053D	1185	swap    ACC
053E	040A	xor     a, STATUS
053F	3D85	sz      ACC.3
0540	2D45	jmp     _L295
0541	54A7	inc     a[0]
0542	3D0A	sz      Z
0543	54A8	inc     a[1]
0544	2D39	jmp     _L184
				;80		for(a=0; a<10000; a++);
				_L295:
0545	5F27	clr     a[0]
0546	5F28	clr     a[1]
				_L186:
0547	0F0F	mov     a, FH
0548	4227	sub     a, a[0]
0549	0F27	mov     a, 27H
054A	5228	sbc     a, a[1]
054B	1185	swap    ACC
054C	040A	xor     a, STATUS
054D	3D85	sz      ACC.3
054E	2D53	jmp     _L296
054F	54A7	inc     a[0]
0550	3D0A	sz      Z
0551	54A8	inc     a[1]
0552	2D47	jmp     _L186
				;81		for(a=0; a<10000; a++);
				_L296:
0553	5F27	clr     a[0]
0554	5F28	clr     a[1]
				_L188:
0555	0F0F	mov     a, FH
0556	4227	sub     a, a[0]
0557	0F27	mov     a, 27H
0558	5228	sbc     a, a[1]
0559	1185	swap    ACC
055A	040A	xor     a, STATUS
055B	3D85	sz      ACC.3
055C	2D61	jmp     _L297
055D	54A7	inc     a[0]
055E	3D0A	sz      Z
055F	54A8	inc     a[1]
0560	2D55	jmp     _L188
				;82		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L297:
0561	5F27	clr     a[0]
0562	5F28	clr     a[1]
				_L190:
0563	0F0F	mov     a, FH
0564	4227	sub     a, a[0]
0565	0F27	mov     a, 27H
0566	5228	sbc     a, a[1]
0567	1185	swap    ACC
0568	040A	xor     a, STATUS
0569	3D85	sz      ACC.3
056A	2D6F	jmp     _L298
056B	54A7	inc     a[0]
056C	3D0A	sz      Z
056D	54A8	inc     a[1]
056E	2D63	jmp     _L190
				_L298:
056F	5F27	clr     a[0]
0570	5F28	clr     a[1]
				_L192:
0571	0F0F	mov     a, FH
0572	4227	sub     a, a[0]
0573	0F27	mov     a, 27H
0574	5228	sbc     a, a[1]
0575	1185	swap    ACC
0576	040A	xor     a, STATUS
0577	3D85	sz      ACC.3
0578	2D7D	jmp     _L299
0579	54A7	inc     a[0]
057A	3D0A	sz      Z
057B	54A8	inc     a[1]
057C	2D71	jmp     _L192
				;83		for(a=0; a<10000; a++);for(a=0; a<10000; a++);
				_L299:
057D	5F27	clr     a[0]
057E	5F28	clr     a[1]
				_L194:
057F	0F0F	mov     a, FH
0580	4227	sub     a, a[0]
0581	0F27	mov     a, 27H
0582	5228	sbc     a, a[1]
0583	1185	swap    ACC
0584	040A	xor     a, STATUS
0585	3D85	sz      ACC.3
0586	2D8B	jmp     _L300
0587	54A7	inc     a[0]
0588	3D0A	sz      Z
0589	54A8	inc     a[1]
058A	2D7F	jmp     _L194
				_L300:
058B	5F27	clr     a[0]
058C	5F28	clr     a[1]
				_L196:
058D	0F0F	mov     a, FH
058E	4227	sub     a, a[0]
058F	0F27	mov     a, 27H
0590	5228	sbc     a, a[1]
0591	1185	swap    ACC
0592	040A	xor     a, STATUS
0593	3D85	sz      ACC.3
0594	2D99	jmp     _L301
0595	54A7	inc     a[0]
0596	3D0A	sz      Z
0597	54A8	inc     a[1]
0598	2D8D	jmp     _L196
				;84		for(a=0; a<10000; a++);for(a=0; a<10000; a++)
				_L301:
0599	5F27	clr     a[0]
059A	5F28	clr     a[1]
				_L198:
059B	0F0F	mov     a, FH
059C	4227	sub     a, a[0]
059D	0F27	mov     a, 27H
059E	5228	sbc     a, a[1]
059F	1185	swap    ACC
05A0	040A	xor     a, STATUS
05A1	3D85	sz      ACC.3
05A2	2DA7	jmp     _L302
05A3	54A7	inc     a[0]
05A4	3D0A	sz      Z
05A5	54A8	inc     a[1]
05A6	2D9B	jmp     _L198
				_L302:
05A7	5F27	clr     a[0]
05A8	5F28	clr     a[1]
				_L200:
05A9	0F0F	mov     a, FH
05AA	4227	sub     a, a[0]
05AB	0F27	mov     a, 27H
05AC	5228	sbc     a, a[1]
05AD	1185	swap    ACC
05AE	040A	xor     a, STATUS
05AF	3D85	sz      ACC.3
05B0	2DB7	jmp     _L303
05B3	54A7	inc     a[0]
05B4	3D0A	sz      Z
05B5	54A8	inc     a[1]
05B6	2DA9	jmp     _L200
				;85		UART_Put_Char(0x41);
05B1	0F41	mov     a, 41H
05B2	27B7	call    _UART_Put_Char
				;86		UART_Put_Char(0x41);
				_L303:
05B7	0F41	mov     a, 41H
05B8	27B7	call    _UART_Put_Char
				;87		UART_Put_Char(0x43);
05B9	0F43	mov     a, 43H
05BA	27B7	call    _UART_Put_Char
				;88		UART_Put_Char(0x43);
05BB	0F43	mov     a, 43H
05BC	27B7	call    _UART_Put_Char
				;89		UART_Put_Char(0x31);
05BD	0F31	mov     a, 31H
05BE	27B7	call    _UART_Put_Char
				;90		UART_Put_Char(0x31);
05BF	0F31	mov     a, 31H
05C0	27B7	call    _UART_Put_Char
				;91		UART_Put_Char(0x32);
05C1	0F32	mov     a, 32H
05C2	27B7	call    _UART_Put_Char
				;92		UART_Put_Char('\n');
05C3	0F0A	mov     a, AH
05C4	27B7	call    _UART_Put_Char
				;93		UART_Start();
05C5	2778	call    _UART_Start
				_L202:
05C6	2DC6	jmp     $
05C7	2DC7	jmp     $
				;94		while(1);
				;95		goto loop;
				;96	}
				;file C:\Users\james\Google ¶³ºÝµwºÐ\¦Û»sª©¤l\holtek\GitHub\HT_USB_Project\HT66FB550_USB_Common\HT66FB550_MCU.c
				;1	#include "HT66FB550.h"
				;2	#include "HT66FB550_typedef.h"
				;3	#include "Config.h"
				;4	
				;5	/*  HT66FB550 INIT
				;6	    step:
				;7	        1.setting PLL(configure by config.h)
				;8	        2.cancel WDT
				;9	    Notification: This function is also cancel USB-related config
				;10	*/
				;11	//#ifndef HT66FB550_MCU_Speed
				;12		//#define HT66FB550_MCU_Speed HT66FB550_16Mhz
				;13	//#endif
				;14	
				;15	#if HT66FB550_MCU_Speed == HT66FB550_6Mhz
				;16	void HT66FB550_MCU_Init(void)
				;17	{
				;18		//1.setting PLL source(6Mhz) -> PLL -> Fh=16Mhz -> Fsys=16Mhz (It seem like little error in here, try later)
				;19	    _ucc    = 0x60;         //sysclk=6MHz,Fsys16MHz=1
				;20	    _usc    = 0x20;         //pll=on
				;21	    _smod   = 0xE1;         //Fsys_clock_divider=none;direct come for Fh
				;22	    //2.cancel WDT
				;23	    _wdtc   = 0xAC;
				;24	}
				;25	#elif HT66FB550_MCU_Speed == HT66FB550_16Mhz
				;26	void HT66FB550_MCU_Init(void)
				;27	{
				;28	    //1.setting PLL source(6Mhz) -> PLL -> Fh=16Mhz -> Fsys=16Mhz (It seem like little error in here, try later)
				;29	    _ucc    = 0x60;         //sysclk=6MHz,Fsys16MHz=1
				_HT66FB550_MCU_Init:
				_HT66FB550_MCU_Init:
0002	0F60	mov     a, 60H
0003	00E8	mov     UCC, a
				;30	    _usc    = 0x00;         //pll=on
0004	1F66	clr     USC
				;31	    _smod   = 0xE1;         //Fsys_clock_divider=none;direct come for Fh
0005	0FE1	mov     a, E1H
0006	008B	mov     SMOD, a
				;32	    //2.cancel WDT
				;33	    _wdtc   = 0xAC;
0007	0FAC	mov     a, ACH
0008	008E	mov     WDTC, a
0009	0003	ret
				;34	}
				;35	
				;36	#endif
				;file C:\Users\james\Google ¶³ºÝµwºÐ\¦Û»sª©¤l\holtek\GitHub\HT_USB_Project\HT66FB550_USB_Common\HT66FB550_UART.c
				;1	#ifndef HT66FB550_UART_H
				;2	#define HT66FB550_UART_H
				;3	
				;4	#include "HT66FB550.h"
				;5	#include "HT66FB550_typedef.h"
				;6	#include "HT66FB550_UART.h"
				;7	#include "Config.h"
				;8	
				;9	#define UART_TX_PIN _pb1
				;10	#if HT66FB550_MCU_Speed == HT66FB550_6Mhz
				;11	    #define tm3al_reload  0x04; 
				;12	    #define tm3ah_reload  0x02;
				;13	#elif HT66FB550_MCU_Speed == HT66FB550_16Mhz
				;14	    #define tm3al_reload  0xD8;
				;15	    #define tm3ah_reload  0x02;
				;16	#endif
				;17	
				;18	#define tm3reload()	_tm3al=tm3al_reload;_tm3ah=tm3ah_reload;
				;19	
				;20	char uart_step,uart_out_buf,uart_pin_buf,uart_head,uart_tail;
				;21	volatile static unsigned char uart_buf[100]__attribute__((at(0x480)));
				;22	
				;23	void __attribute((interrupt(0x24)))	ISR_timer3(void)
				;24	{
				@ISR_timer3_code .SECTION 'CODE'
0024	409C	mov     r124, a
0025	0704	mov     a, BP
0026	409D	mov     r224, a
0027	2F59	jmp     _ISR_timer3
				_ISR_timer3:
				_ISR_timer3:
0759	070A	mov     a, STATUS
075A	409E	mov     r324, a
075B	0703	mov     a, MP1
075C	409F	mov     r424, a
075D	0701	mov     a, MP0
075E	40A0	mov     r524, a
075F	0707	mov     a, TBLP
0760	40A1	mov     r624, a
0761	0709	mov     a, TBHP
0762	40A2	mov     r724, a
				;25		if(_t3af){
0763	3B95	snz     T3AF
0764	2F69	jmp     _L18
				;26			_t3af = 0;
0765	3795	clr     T3AF
				;27			_t3on = 0;
0766	35DE	clr     T3ON
				;28			_t3on = 1;
0767	31DE	set     T3ON
				;29			UART_ISR();
0768	26DD	call    _UART_ISR
				_L18:
0769	471D	mov     a, r224
076A	0084	mov     BP, a
076B	471E	mov     a, r324
076C	008A	mov     STATUS, a
076D	471F	mov     a, r424
076E	0083	mov     MP1, a
076F	4720	mov     a, r524
0770	0081	mov     MP0, a
0771	4721	mov     a, r624
0772	0087	mov     TBLP, a
0773	4722	mov     a, r724
0774	0089	mov     TBHP, a
0775	1D05	tabrd   ACC
0776	471C	mov     a, r124
0777	0004	reti
				;30		}		
				;31		return;
				;32	}
				;33	
				;34	void UART_ISR(void)
				;35	{
				;36		UART_TX_PIN = uart_pin_buf;
				_UART_ISR:
				_UART_ISR:
06DD	4711	mov     a, uart_pin_buf[0]
06DE	0E01	and     a, 1H
06DF	4098	mov     ra24, a
06E0	4718	mov     a, ra24
06E1	4398	addm    a, ra24
06E2	0722	mov     a, PB
06E3	4099	mov     rb24, a
06E4	7499	clr     rb24.1
06E5	4719	mov     a, rb24
06E6	4518	or      a, ra24
06E7	00A2	mov     PB, a
				;37		switch(uart_step)
06E8	4713	mov     a, uart_step[0]
06E9	0A00	sub     a, 0H
06EA	3D0A	sz      Z
06EB	2F17	jmp     _L3
06EC	0A01	sub     a, 1H
06ED	3D0A	sz      Z
06EE	2F19	jmp     _L4
06EF	4713	mov     a, uart_step[0]
06F0	0A02	sub     a, 2H
06F1	3D0A	sz      Z
06F2	2F19	jmp     _L4
06F3	0A01	sub     a, 1H
06F4	3D0A	sz      Z
06F5	2F19	jmp     _L4
06F6	4713	mov     a, uart_step[0]
06F7	0A04	sub     a, 4H
06F8	3D0A	sz      Z
06F9	2F19	jmp     _L4
06FA	0A01	sub     a, 1H
06FB	3D0A	sz      Z
06FC	2F19	jmp     _L4
06FD	4713	mov     a, uart_step[0]
06FE	0A06	sub     a, 6H
06FF	3D0A	sz      Z
0700	2F19	jmp     _L4
0701	0A01	sub     a, 1H
0702	3D0A	sz      Z
0703	2F19	jmp     _L4
0704	4713	mov     a, uart_step[0]
0705	0A08	sub     a, 8H
0706	3D0A	sz      Z
0707	2F19	jmp     _L4
0708	0A01	sub     a, 1H
0709	3D0A	sz      Z
070A	2F23	jmp     _L5
070B	4713	mov     a, uart_step[0]
070C	0A0A	sub     a, AH
070D	3D0A	sz      Z
070E	2F23	jmp     _L5
070F	0A01	sub     a, 1H
0710	3D0A	sz      Z
0711	2F23	jmp     _L5
0712	4713	mov     a, uart_step[0]
0713	0A0C	sub     a, CH
0714	390A	snz     Z
0715	2F57	jmp     _L2
0716	2F26	jmp     _L17
				;38		{
				;39			case 0:
				;40				uart_pin_buf=0;
				_L3:
0717	5F11	clr     uart_pin_buf[0]
				;41				break;	
0718	2F57	jmp     _L2
				;42			case 1:
				;43			case 3:
				;44			case 5:
				;45			case 7:
				;46			case 2:
				;47			case 4:
				;48			case 6:
				;49			case 8:
				;50	            uart_pin_buf = uart_out_buf & 0x01;
				_L4:
0719	4712	mov     a, uart_out_buf[0]
071A	4098	mov     ra24, a
071B	4718	mov     a, ra24
071C	0E01	and     a, 1H
071D	4091	mov     uart_pin_buf[0], a
				;51	            uart_out_buf = uart_out_buf >> 1;
071E	5A18	rlca    ra24
071F	5B98	rrc     ra24
0720	4718	mov     a, ra24
0721	4092	mov     uart_out_buf[0], a
				;52				break;
0722	2F57	jmp     _L2
				;53			case 9:		//stop bit
				;54			case 10:	//stop bit hold
				;55			case 11:	//stop bit hold
				;56				uart_pin_buf = 1;
				_L5:
0723	0F01	mov     a, 1H
0724	4091	mov     uart_pin_buf[0], a
				;57				break;
0725	2F57	jmp     _L2
				;58			case 12:
				;59	            if((uart_head==uart_tail) & (uart_buf[uart_head]==0)){
				_L17:
0726	4710	mov     a, uart_head[0]
0727	409A	mov     rd24, a
0728	470F	mov     a, uart_tail[0]
0729	4098	mov     ra24, a
072A	471A	mov     a, rd24
072B	4099	mov     rb24, a
072C	5F1B	clr     rc24
072D	3F85	sz      ACC.7
072E	5F9B	set     rc24
072F	0F80	mov     a, 80H
0730	4319	add     a, rb24
0731	0083	mov     MP1, a
0732	0F04	mov     a, 4H
0733	531B	adc     a, rc24
0734	0081	mov     MP0, a
0735	2019	call    L0019
0736	4099	mov     rb24, a
0737	5099	sz      rb24
0738	2F3F	jmp     _L7
0739	471A	mov     a, rd24
073A	4218	sub     a, ra24
073B	390A	snz     Z
073C	2F3F	jmp     _L7
				;60	                UART_Stop();
				;61	                return;
				;62	            }
				;63	            uart_step = -1;
				_L7:
073F	5F93	set     uart_step[0]
				;64	            uart_pin_buf=1;
0740	0F01	mov     a, 1H
0741	4091	mov     uart_pin_buf[0], a
				;65	            uart_out_buf = uart_buf[uart_tail];
0742	4718	mov     a, ra24
0743	4099	mov     rb24, a
0744	5F1B	clr     rc24
0745	3F85	sz      ACC.7
0746	5F9B	set     rc24
0747	0F80	mov     a, 80H
0748	4319	add     a, rb24
0749	0083	mov     MP1, a
074A	0F04	mov     a, 4H
074B	531B	adc     a, rc24
074C	0081	mov     MP0, a
074D	2019	call    L0019
074E	4092	mov     uart_out_buf[0], a
				;66	            //uart_out_buf = 0x41;
				;67	            uart_buf[uart_tail] = 0;
074F	0701	mov     a, MP0
0750	0084	mov     BP, a
0751	0F00	mov     a, 0H
0752	0082	mov     [02H], a
				;68	            uart_tail++;
0753	5498	inc     ra24
				;69	            uart_tail = uart_tail & 0x7f;
0754	7798	clr     ra24.7
0755	4718	mov     a, ra24
0756	408F	mov     uart_tail[0], a
				;70				break;		
				;71		}
				;72		uart_step++;
				_L2:
0757	5493	inc     uart_step[0]
				_L1:
0758	0003	ret
				;73		return;
				;74	}
				;75	void UART_Init(void)
				;76	{
				;77	    _tm3c0 = 0x10;
				_UART_Init:
				_UART_Init:
000A	0F10	mov     a, 10H
000B	00DE	mov     TM3C0, a
				;78	    _tm3c1 = 0xC0;
000C	0FC0	mov     a, C0H
000D	00DF	mov     TM3C1, a
				;79	    uart_head = 0;
000E	5F10	clr     uart_head[0]
				;80	    uart_tail = 0;
000F	5F0F	clr     uart_tail[0]
				;81		tm3reload();
0010	0FD8	mov     a, D8H
0011	00E2	mov     TM3AL, a
0012	0F02	mov     a, 2H
0013	00E3	mov     TM3AH, a
				;82	    _mf3e = 1;
0014	3092	set     MF3E
				;83	    _t3ae = 1;
0015	3195	set     T3AE
				;84	    _emi = 1;
0016	3010	set     EMI
0017	0003	ret
0018	1483	inc     MP1
				L0019:
0019	0701	mov     a, MP0
001A	0084	mov     BP, a
001B	0702	mov     a, [02H]
001C	0003	ret
001D	0000	nop
001E	0000	nop
001F	0000	nop
0020	0000	nop
0021	0000	nop
0022	0000	nop
0023	0000	nop
				;85	}
				;86	
				;87	void UART_Start(void)
				;88	{
				;89		if(_t3on)
				_UART_Start:
				_UART_Start:
0778	3DDE	sz      T3ON
0779	2FB6	jmp     _L24
				;90			return;
				;91	    if(uart_head!=uart_tail){
077A	4710	mov     a, uart_head[0]
077B	4094	mov     ra, a
077C	470F	mov     a, uart_tail[0]
077D	4097	mov     rd, a
077E	4714	mov     a, ra
077F	4217	sub     a, rd
0780	3D0A	sz      Z
0781	2F98	jmp     _L26
				;92	        uart_out_buf = uart_buf[uart_tail];
0782	4717	mov     a, rd
0783	4095	mov     rb, a
0784	5F16	clr     rc
0785	3F85	sz      ACC.7
0786	5F96	set     rc
0787	0F80	mov     a, 80H
0788	4315	add     a, rb
0789	0083	mov     MP1, a
078A	0F04	mov     a, 4H
078B	5316	adc     a, rc
078C	0081	mov     MP0, a
078D	2019	call    L0019
078E	4092	mov     uart_out_buf[0], a
				;93	        uart_buf[uart_tail] = 0;
078F	0701	mov     a, MP0
0790	0084	mov     BP, a
0791	0F00	mov     a, 0H
0792	0082	mov     [02H], a
				;94	        uart_tail++;
0793	5497	inc     rd
				;95	        uart_tail = uart_tail & 0x7f; 
0794	7797	clr     rd.7
0795	4717	mov     a, rd
0796	408F	mov     uart_tail[0], a
0797	2FB2	jmp     _L27
				;96	    }else if(uart_buf[uart_head]!=0){
				_L26:
0798	4714	mov     a, ra
0799	4095	mov     rb, a
079A	5F16	clr     rc
079B	3F85	sz      ACC.7
079C	5F96	set     rc
079D	0F80	mov     a, 80H
079E	4315	add     a, rb
079F	0083	mov     MP1, a
07A0	0F04	mov     a, 4H
07A1	5316	adc     a, rc
07A2	0081	mov     MP0, a
07A3	2019	call    L0019
07A4	4095	mov     rb, a
07A5	5095	sz      rb
07A6	2FA8	jmp     _LI1
07A7	2FB6	jmp     _L24
				;97	        uart_out_buf = uart_buf[uart_tail];
				_LI1:
07A8	4715	mov     a, rb
07A9	4092	mov     uart_out_buf[0], a
				;98	        uart_buf[uart_tail] = 0;
07AA	0701	mov     a, MP0
07AB	0084	mov     BP, a
07AC	0F00	mov     a, 0H
07AD	0082	mov     [02H], a
				;99	        uart_tail++;
07AE	5494	inc     ra
				;100	        uart_tail = uart_tail & 0x7f; 
07AF	7794	clr     ra.7
07B0	4714	mov     a, ra
07B1	408F	mov     uart_tail[0], a
				;101	    }else{
				;102	        return;
				;103	    }
				;104	    uart_step = 0;
				_L27:
07B2	5F13	clr     uart_step[0]
				;105		uart_pin_buf = 1;
07B3	0F01	mov     a, 1H
07B4	4091	mov     uart_pin_buf[0], a
				;106	    _t3on = 1;
07B5	31DE	set     T3ON
				_L24:
07B6	0003	ret
				;107	}
				;108	
				;109	void UART_Stop(void)
				;110	{
				;111	    _t3on = 0;
073D	35DE	clr     T3ON
073E	2F58	jmp     _L1
				;112	}
				;113	
				;114	char UART_Put_Char(char ch)
				;115	{
				_UART_Put_Char:
				_UART_Put_Char:
07B7	40A3	mov     ch[0], a
				;116	    if(uart_head==uart_tail){
07B8	4710	mov     a, uart_head[0]
07B9	4094	mov     ra, a
07C5	4714	mov     a, ra
07C6	420F	sub     a, uart_tail[0]
07C7	390A	snz     Z
07C8	2FCD	jmp     L07CD
				;117	        if(uart_buf[uart_head]==0){
07BA	4714	mov     a, ra
07BB	4095	mov     rb, a
07BC	5F16	clr     rc
07BD	3F85	sz      ACC.7
07BE	5F96	set     rc
07BF	0F80	mov     a, 80H
07C0	4315	add     a, rb
07C1	0083	mov     MP1, a
07C2	0F04	mov     a, 4H
07C3	5316	adc     a, rc
07C4	0081	mov     MP0, a
07C9	2019	call    L0019
07CA	40A4	mov     data, a
07CB	50A4	sz      data
07CC	2FD8	jmp     L07D8
				;118	            uart_buf[uart_head] = ch;
				;119	            uart_head++;
				;120	            uart_head = uart_head & 0x7f; 
				;121	        }
				;122	        else{
				;123	            return UART_Buffer_Full;
				L07D8:
07D8	0F01	mov     a, 1H
07D9	4094	mov     ra, a
				;124	        }
				;125	    }else{
				;126	        uart_buf[uart_head] = ch;
				L07CD:
07CD	0701	mov     a, MP0
07CE	0084	mov     BP, a
07CF	4723	mov     a, ch[0]
07D0	0082	mov     [02H], a
				;127	        uart_head++;
07D1	5494	inc     ra
				;128	        uart_head = uart_head & 0x7f; 
07D2	7794	clr     ra.7
07D3	4714	mov     a, ra
07D4	4090	mov     uart_head[0], a
				;129	    }
				;130	    return UART_Buffer_Add_Success;
07D5	0F02	mov     a, 2H
07D6	4094	mov     ra, a
07D7	2FDA	jmp     L07DA
				;131	}
				L07DA:
07DA	4714	mov     a, ra
07DB	0003	ret
				;132	
				;133	#endif
				;file C:\Users\james\Google ¶³ºÝµwºÐ\¦Û»sª©¤l\holtek\GitHub\HT_USB_Project\HT66FB550_USB_Common\HT66FB550_IO.c
				;1	#include "HT66FB550.h"
				;2	#include "HT66FB550_MCU.h"
				;3	#include "HT66FB550_IO.h"
				;4	#include "HT66FB550_typedef.h"
				;5	
				;6	//io direction buf
				;7	char port_A_config,port_B_config,port_C_config,port_D_config,port_E_config;
				;8	//io data buf
				;9	char port_A_data,port_B_data,port_C_data,port_D_data,port_E_data;
				;10	//io pull-high buf
				;11	char port_A_pull_high,port_B_pull_high,port_C_pull_high,port_D_pull_high,port_E_pull_high;
				;12	
				;13	void HT66FB550_IO_INIT(void)
				;14	{
				;15		HT66FB550_IO_DIR(HT66FB550_MCU_IO_PA,HT66FB550_MCU_IO_PINALL,HT66FB550_MCU_IO_OUTPUT);
				_HT66FB550_IO_INIT:
				_HT66FB550_IO_INIT:
06B2	5F24	clr     data
06B3	5FA3	set     ch
06B4	0F00	mov     a, 0H
06B5	25C8	call    _HT66FB550_IO_DIR
				;16		HT66FB550_IO_DIR(HT66FB550_MCU_IO_PB,HT66FB550_MCU_IO_PINALL,HT66FB550_MCU_IO_OUTPUT);
06B6	5F24	clr     data
06B7	5FA3	set     ch
06B8	0F01	mov     a, 1H
06B9	25C8	call    _HT66FB550_IO_DIR
				;17		HT66FB550_IO_DIR(HT66FB550_MCU_IO_PC,HT66FB550_MCU_IO_PINALL,HT66FB550_MCU_IO_OUTPUT);
06BA	5F24	clr     data
06BB	5FA3	set     ch
06BC	0F02	mov     a, 2H
06BD	25C8	call    _HT66FB550_IO_DIR
				;18		HT66FB550_IO_DIR(HT66FB550_MCU_IO_PD,HT66FB550_MCU_IO_PINALL,HT66FB550_MCU_IO_OUTPUT);
06BE	5F24	clr     data
06BF	5FA3	set     ch
06C0	0F03	mov     a, 3H
06C1	25C8	call    _HT66FB550_IO_DIR
				;19		HT66FB550_IO_DIR(HT66FB550_MCU_IO_PE,HT66FB550_MCU_IO_PINALL,HT66FB550_MCU_IO_OUTPUT);
06C2	5F24	clr     data
06C3	5FA3	set     ch
06C4	0F04	mov     a, 4H
06C5	25C8	call    _HT66FB550_IO_DIR
				;20		HT66FB550_IO_Data(HT66FB550_MCU_IO_PA,HT66FB550_MCU_IO_PINALL,0x00);
06C6	5F24	clr     data
06C7	5FA3	set     ch
06C8	0F00	mov     a, 0H
06C9	263D	call    _HT66FB550_IO_Data
				;21		HT66FB550_IO_Data(HT66FB550_MCU_IO_PB,HT66FB550_MCU_IO_PINALL,0x00);
06CA	5F24	clr     data
06CB	5FA3	set     ch
06CC	0F01	mov     a, 1H
06CD	263D	call    _HT66FB550_IO_Data
				;22		HT66FB550_IO_Data(HT66FB550_MCU_IO_PC,HT66FB550_MCU_IO_PINALL,0x00);
06CE	5F24	clr     data
06CF	5FA3	set     ch
06D0	0F02	mov     a, 2H
06D1	263D	call    _HT66FB550_IO_Data
				;23		HT66FB550_IO_Data(HT66FB550_MCU_IO_PD,HT66FB550_MCU_IO_PINALL,0x00);
06D2	5F24	clr     data
06D3	5FA3	set     ch
06D4	0F03	mov     a, 3H
06D5	263D	call    _HT66FB550_IO_Data
				;24		HT66FB550_IO_Data(HT66FB550_MCU_IO_PE,HT66FB550_MCU_IO_PINALL,0x00);
06D6	5F24	clr     data
06D7	5FA3	set     ch
06D8	0F04	mov     a, 4H
06D9	263D	call    _HT66FB550_IO_Data
				;25	    //set ADC pin to IO pin here
				;26	    _acer0 = 0;
06DA	1F33	clr     ACER0
				;27	    _acer1 = 0;
06DB	1F34	clr     ACER1
06DC	0003	ret
				;28	    
				;29	}
				;30	
				;31	void HT66FB550_IO_DIR(char port, char pin, char direction)
				;32	{
				_HT66FB550_IO_DIR:
				_HT66FB550_IO_DIR:
				@dummy .SECTION 'CODE'
05C8	4094	mov     ra, a
				;33		char filter=0x01;
				;34		filter = filter << pin;
05C9	0F01	mov     a, 1H
05CA	4095	mov     rb, a
05CB	5F16	clr     rc
05CC	5423	inca    pin[0]
05CD	2DD1	jmp     L05D1
				L05CE:
05CE	340A	clr     C
05CF	5A95	rlc     rb
05D0	5A96	rlc     rc
				L05D1:
05D1	1785	sdz     ACC
05D2	2DCE	jmp     L05CE
05D3	4715	mov     a, rb
05D4	40A6	mov     filter[0], a
				;35		switch(port)
05D5	4714	mov     a, ra
05D6	0A00	sub     a, 0H
05D7	3D0A	sz      Z
05D8	2DE8	jmp     L05E8
05D9	0A01	sub     a, 1H
05DA	3D0A	sz      Z
05DB	2DF9	jmp     L05F9
05DC	4714	mov     a, ra
05DD	0A02	sub     a, 2H
05DE	3D0A	sz      Z
05DF	2E0A	jmp     L060A
05E0	0A01	sub     a, 1H
05E1	3D0A	sz      Z
05E2	2E1B	jmp     L061B
05E3	4714	mov     a, ra
05E4	0A04	sub     a, 4H
05E5	390A	snz     Z
05E6	2E3C	jmp     L063C
05E7	2E2C	jmp     L062C
				;36		{
				;37			case HT66FB550_MCU_IO_PA:
				;38				switch(pin)
				;39				{
				;40					case HT66FB550_MCU_IO_PINALL:
				;41						port_A_config = direction;
				;42						break;
				;43					default:
				;44						port_A_config = port_A_config & (!filter);
				L05E8:
05E8	0F01	mov     a, 1H
05E9	4094	mov     ra, a
05EA	50A6	sz      filter[0]
05EB	2DED	jmp     L05ED
05EC	2DEE	jmp     L05EE
				L05ED:
05ED	5F14	clr     ra
				L05EE:
05EE	470E	mov     a, port_A_config[0]
05EF	4694	andm    a, ra
				;45						port_A_config = port_A_config | (filter & direction);
05F0	4724	mov     a, direction[0]
05F1	4695	andm    a, rb
05F2	4714	mov     a, ra
05F3	4595	orm     a, rb
05F4	4715	mov     a, rb
05F5	408E	mov     port_A_config[0], a
				;46						break;
				;47				}
				;48				_pac = port_A_config;
05F6	4715	mov     a, rb
05F7	009B	mov     PAC, a
				;49				break;
05F8	2E3C	jmp     L063C
				;50			case HT66FB550_MCU_IO_PB:
				;51				switch(pin)
				;52				{
				;53					case HT66FB550_MCU_IO_PINALL:
				;54						port_B_config = direction;
				;55						break;
				;56					default:
				;57						port_B_config = port_B_config & (!filter);
				L05F9:
05F9	0F01	mov     a, 1H
05FA	4094	mov     ra, a
05FB	50A6	sz      filter[0]
05FC	2DFE	jmp     L05FE
05FD	2DFF	jmp     L05FF
				L05FE:
05FE	5F14	clr     ra
				L05FF:
05FF	470D	mov     a, port_B_config[0]
0600	4694	andm    a, ra
				;58						port_B_config = port_B_config | (filter & direction);
0601	4724	mov     a, direction[0]
0602	4695	andm    a, rb
0603	4714	mov     a, ra
0604	4595	orm     a, rb
0605	4715	mov     a, rb
0606	408D	mov     port_B_config[0], a
				;59						break;
				;60				}
				;61				_pbc = port_B_config;
0607	4715	mov     a, rb
0608	00A3	mov     PBC, a
				;62				break;
0609	2E3C	jmp     L063C
				;63			case HT66FB550_MCU_IO_PC:
				;64				switch(pin)
				;65				{
				;66					case HT66FB550_MCU_IO_PINALL:
				;67						port_C_config = direction;
				;68						break;
				;69					default:
				;70						port_C_config = port_C_config & (!filter);
				L060A:
060A	0F01	mov     a, 1H
060B	4094	mov     ra, a
060C	50A6	sz      filter[0]
060D	2E0F	jmp     L060F
060E	2E10	jmp     L0610
				L060F:
060F	5F14	clr     ra
				L0610:
0610	470C	mov     a, port_C_config[0]
0611	4694	andm    a, ra
				;71						port_C_config = port_C_config | (filter & direction);
0612	4724	mov     a, direction[0]
0613	4695	andm    a, rb
0614	4714	mov     a, ra
0615	4595	orm     a, rb
0616	4715	mov     a, rb
0617	408C	mov     port_C_config[0], a
				;72						break;
				;73				}
				;74				_pcc = port_C_config;
0618	4715	mov     a, rb
0619	00A5	mov     PCC, a
				;75				break;
061A	2E3C	jmp     L063C
				;76			case HT66FB550_MCU_IO_PD:
				;77				switch(pin)
				;78				{
				;79					case HT66FB550_MCU_IO_PINALL:
				;80						port_D_config = direction;
				;81						break;
				;82					default:
				;83						port_D_config = port_D_config & (!filter);
				L061B:
061B	0F01	mov     a, 1H
061C	4094	mov     ra, a
061D	50A6	sz      filter[0]
061E	2E20	jmp     L0620
061F	2E21	jmp     L0621
				L0620:
0620	5F14	clr     ra
				L0621:
0621	470B	mov     a, port_D_config[0]
0622	4694	andm    a, ra
				;84						port_D_config = port_D_config | (filter & direction);
0623	4724	mov     a, direction[0]
0624	4695	andm    a, rb
0625	4714	mov     a, ra
0626	4595	orm     a, rb
0627	4715	mov     a, rb
0628	408B	mov     port_D_config[0], a
				;85						break;
				;86				}
				;87				_pdc = port_D_config;
0629	4715	mov     a, rb
062A	00A7	mov     PDC, a
				;88				break;
062B	2E3C	jmp     L063C
				;89			case HT66FB550_MCU_IO_PE:
				;90				switch(pin)
				;91				{
				;92					case HT66FB550_MCU_IO_PINALL:
				;93						port_E_config = direction;
				;94						break;
				;95					default:
				;96						port_E_config = port_E_config & (!filter);
				L062C:
062C	0F01	mov     a, 1H
062D	4094	mov     ra, a
062E	50A6	sz      filter[0]
062F	2E31	jmp     L0631
0630	2E32	jmp     L0632
				L0631:
0631	5F14	clr     ra
				L0632:
0632	470A	mov     a, port_E_config[0]
0633	4694	andm    a, ra
				;97						port_E_config = port_E_config | (filter & direction);
0634	4724	mov     a, direction[0]
0635	4695	andm    a, rb
0636	4714	mov     a, ra
0637	4595	orm     a, rb
0638	4715	mov     a, rb
0639	408A	mov     port_E_config[0], a
				;98						break;
				;99				}
				;100				_pec = port_E_config;
063A	4715	mov     a, rb
063B	00A9	mov     PEC, a
				L063C:
063C	0003	ret
				;101				break;
				;102		}	
				;103	}
				;104	
				;105	void HT66FB550_IO_Data(char port, char pin, char data)
				;106	{
				_HT66FB550_IO_Data:
				_HT66FB550_IO_Data:
063D	4094	mov     ra, a
				;107		char filter=0x01;
				;108		filter = filter << pin;
063E	0F01	mov     a, 1H
063F	4095	mov     rb, a
0640	5F16	clr     rc
0641	5423	inca    pin[0]
0642	2E46	jmp     L0646
				L0643:
0643	340A	clr     C
0644	5A95	rlc     rb
0645	5A96	rlc     rc
				L0646:
0646	1785	sdz     ACC
0647	2E43	jmp     L0643
0648	4715	mov     a, rb
0649	40A6	mov     filter[0], a
				;109		switch(port)
064A	4714	mov     a, ra
064B	0A00	sub     a, 0H
064C	3D0A	sz      Z
064D	2E5D	jmp     L065D
064E	0A01	sub     a, 1H
064F	3D0A	sz      Z
0650	2E6E	jmp     L066E
0651	4714	mov     a, ra
0652	0A02	sub     a, 2H
0653	3D0A	sz      Z
0654	2E7F	jmp     L067F
0655	0A01	sub     a, 1H
0656	3D0A	sz      Z
0657	2E90	jmp     L0690
0658	4714	mov     a, ra
0659	0A04	sub     a, 4H
065A	390A	snz     Z
065B	2EB1	jmp     L06B1
065C	2EA1	jmp     L06A1
				;110		{
				;111			case HT66FB550_MCU_IO_PA:
				;112				switch(pin)
				;113				{
				;114					case HT66FB550_MCU_IO_PINALL:
				;115						port_A_data = data;
				;116						break;
				;117					default:
				;118						port_A_data = port_A_data & (!filter);
				L065D:
065D	0F01	mov     a, 1H
065E	4094	mov     ra, a
065F	50A6	sz      filter[0]
0660	2E62	jmp     L0662
0661	2E63	jmp     L0663
				L0662:
0662	5F14	clr     ra
				L0663:
0663	4709	mov     a, port_A_data[0]
0664	4694	andm    a, ra
				;119						port_A_data = port_A_data | (filter & data);
0665	4724	mov     a, data[0]
0666	4695	andm    a, rb
0667	4714	mov     a, ra
0668	4595	orm     a, rb
0669	4715	mov     a, rb
066A	4089	mov     port_A_data[0], a
				;120						break;
				;121				}
				;122				_pa = port_A_data;
066B	4715	mov     a, rb
066C	009A	mov     PA, a
				;123				break;
066D	2EB1	jmp     L06B1
				;124			case HT66FB550_MCU_IO_PB:
				;125				switch(pin)
				;126				{
				;127					case HT66FB550_MCU_IO_PINALL:
				;128						port_B_data = data;
				;129						break;
				;130					default:
				;131						port_B_data = port_B_data & (!filter);
				L066E:
066E	0F01	mov     a, 1H
066F	4094	mov     ra, a
0670	50A6	sz      filter[0]
0671	2E73	jmp     L0673
0672	2E74	jmp     L0674
				L0673:
0673	5F14	clr     ra
				L0674:
0674	4708	mov     a, port_B_data[0]
0675	4694	andm    a, ra
				;132						port_B_data = port_B_data | (filter & data);
0676	4724	mov     a, data[0]
0677	4695	andm    a, rb
0678	4714	mov     a, ra
0679	4595	orm     a, rb
067A	4715	mov     a, rb
067B	4088	mov     port_B_data[0], a
				;133						break;
				;134				}
				;135				_pb = port_B_data;
067C	4715	mov     a, rb
067D	00A2	mov     PB, a
				;136				break;
067E	2EB1	jmp     L06B1
				;137			case HT66FB550_MCU_IO_PC:
				;138				switch(pin)
				;139				{
				;140					case HT66FB550_MCU_IO_PINALL:
				;141						port_C_data = data;
				;142						break;
				;143					default:
				;144						port_C_data = port_C_data & (!filter);
				L067F:
067F	0F01	mov     a, 1H
0680	4094	mov     ra, a
0681	50A6	sz      filter[0]
0682	2E84	jmp     L0684
0683	2E85	jmp     L0685
				L0684:
0684	5F14	clr     ra
				L0685:
0685	4707	mov     a, port_C_data[0]
0686	4694	andm    a, ra
				;145						port_C_data = port_C_data | (filter & data);
0687	4724	mov     a, data[0]
0688	4695	andm    a, rb
0689	4714	mov     a, ra
068A	4595	orm     a, rb
068B	4715	mov     a, rb
068C	4087	mov     port_C_data[0], a
				;146						break;
				;147				}
				;148				_pc = port_C_data;
068D	4715	mov     a, rb
068E	00A4	mov     PC, a
				;149				break;
068F	2EB1	jmp     L06B1
				;150			case HT66FB550_MCU_IO_PD:
				;151				switch(pin)
				;152				{
				;153					case HT66FB550_MCU_IO_PINALL:
				;154						port_D_data = data;
				;155						break;
				;156					default:
				;157						port_D_data = port_D_data & (!filter);
				L0690:
0690	0F01	mov     a, 1H
0691	4094	mov     ra, a
0692	50A6	sz      filter[0]
0693	2E95	jmp     L0695
0694	2E96	jmp     L0696
				L0695:
0695	5F14	clr     ra
				L0696:
0696	4706	mov     a, port_D_data[0]
0697	4694	andm    a, ra
				;158						port_D_data = port_D_data | (filter & data);
0698	4724	mov     a, data[0]
0699	4695	andm    a, rb
069A	4714	mov     a, ra
069B	4595	orm     a, rb
069C	4715	mov     a, rb
069D	4086	mov     port_D_data[0], a
				;159						break;
				;160				}
				;161				_pd = port_D_data;
069E	4715	mov     a, rb
069F	00A6	mov     PD, a
				;162				break;
06A0	2EB1	jmp     L06B1
				;163			case HT66FB550_MCU_IO_PE:
				;164				switch(pin)
				;165				{
				;166					case HT66FB550_MCU_IO_PINALL:
				;167						port_E_data = data;
				;168						break;
				;169					default:
				;170						port_E_data = port_E_data & (!filter);
				L06A1:
06A1	0F01	mov     a, 1H
06A2	4094	mov     ra, a
06A3	50A6	sz      filter[0]
06A4	2EA6	jmp     L06A6
06A5	2EA7	jmp     L06A7
				L06A6:
06A6	5F14	clr     ra
				L06A7:
06A7	4705	mov     a, port_E_data[0]
06A8	4694	andm    a, ra
				;171						port_E_data = port_E_data | (filter & data);
06A9	4724	mov     a, data[0]
06AA	4695	andm    a, rb
06AB	4714	mov     a, ra
06AC	4595	orm     a, rb
06AD	4715	mov     a, rb
06AE	4085	mov     port_E_data[0], a
				;172						break;
				;173				}
				;174				_pe = port_E_data;
06AF	4715	mov     a, rb
06B0	00A8	mov     PE, a
				L06B1:
06B1	0003	ret
				;175				break;
				;176		}		
				;177	}
				;178	
				;179	void HT66FB550_IO_Pull_High(char port, char pin, char data)
				;180	{
				;181		char filter=0x01;
				;182		filter = filter << pin;
				;183		switch(port)
				;184		{
				;185			case HT66FB550_MCU_IO_PA:
				;186				switch(pin==HT66FB550_MCU_IO_PINALL)
				;187				{
				;188					case HT66FB550_MCU_IO_PINALL:
				;189						port_A_pull_high = data;
				;190						break;
				;191					default:
				;192						port_A_pull_high = port_A_pull_high & (!filter);
				;193						port_A_pull_high = port_A_pull_high | (filter & data);
				;194						break;
				;195				}
				;196				_pa = port_A_pull_high;
				;197				break;
				;198			case HT66FB550_MCU_IO_PB:
				;199				switch(pin==HT66FB550_MCU_IO_PINALL)
				;200				{
				;201					case HT66FB550_MCU_IO_PINALL:
				;202						port_B_pull_high = data;
				;203						break;
				;204					default:
				;205						port_B_pull_high = port_B_pull_high & (!filter);
				;206						port_B_pull_high = port_B_pull_high | (filter & data);
				;207						break;
				;208				}
				;209				_pb = port_B_pull_high;
				;210				break;
				;211			case HT66FB550_MCU_IO_PC:
				;212				switch(pin==HT66FB550_MCU_IO_PINALL)
				;213				{
				;214					case HT66FB550_MCU_IO_PINALL:
				;215						port_C_pull_high = data;
				;216						break;
				;217					default:
				;218						port_C_pull_high = port_C_pull_high & (!filter);
				;219						port_C_pull_high = port_C_pull_high | (filter & data);
				;220						break;
				;221				}
				;222				_pc = port_C_pull_high;
				;223				break;
				;224			case HT66FB550_MCU_IO_PD:
				;225				switch(pin==HT66FB550_MCU_IO_PINALL)
				;226				{
				;227					case HT66FB550_MCU_IO_PINALL:
				;228						port_D_pull_high = data;
				;229						break;
				;230					default:
				;231						port_D_pull_high = port_D_pull_high & (!filter);
				;232						port_D_pull_high = port_D_pull_high | (filter & data);
				;233						break;
				;234				}
				;235				_pd = port_D_pull_high;
				;236				break;
				;237			case HT66FB550_MCU_IO_PE:
				;238				switch(pin==HT66FB550_MCU_IO_PINALL)
				;239				{
				;240					case HT66FB550_MCU_IO_PINALL:
				;241						port_E_pull_high = data;
				;242						break;
				;243					default:
				;244						port_E_pull_high = port_E_pull_high & (!filter);
				;245						port_E_pull_high = port_E_pull_high | (filter & data);
				;246						break;
				;247				}
				;248				_pe = port_E_pull_high;
				;249				break;
				;250		}			
				;251	}
				;252	
				;253	void HT66FB550_IO_High_Current(char port, char data)
				;254	{
				;255		switch(port)
				;256		{
				;257			case HT66FB550_MCU_IO_PA:
				;258				switch(data)
				;259				{
				;260					case HT66FB550_MCU_IO_DATA_SET:
				;261						_paoi = 0xff;
				;262						break;
				;263					case HT66FB550_MCU_IO_DATA_CLEAR:
				;264					default:
				;265						_paoi = 0x00;
				;266						break;
				;267				}
				;268				break;
				;269			case HT66FB550_MCU_IO_PB:
				;270				switch(data)
				;271				{
				;272					case HT66FB550_MCU_IO_DATA_SET:
				;273						_pbhi = 1;
				;274						_pbli = 1;
				;275						break;
				;276					case HT66FB550_MCU_IO_DATA_CLEAR:
				;277					default:
				;278						_pbhi = 0;
				;279						_pbli = 0;
				;280						break;
				;281				}
				;282			case HT66FB550_MCU_IO_PC:
				;283				switch(data)
				;284				{
				;285					case HT66FB550_MCU_IO_DATA_SET:
				;286						_pchi = 1;
				;287						_pcli = 1;
				;288						break;
				;289					case HT66FB550_MCU_IO_DATA_CLEAR:
				;290					default:
				;291						_pchi = 0;
				;292						_pcli = 0;
				;293						break;
				;294				}
				;295			case HT66FB550_MCU_IO_PD:
				;296				switch(data)
				;297				{
				;298					case HT66FB550_MCU_IO_DATA_SET:
				;299						_pdhi = 1;
				;300						_pdli = 1;
				;301						break;
				;302					case HT66FB550_MCU_IO_DATA_CLEAR:
				;303					default:
				;304						_pdhi = 0;
				;305						_pdli = 0;
				;306						break;
				;307				}
				;308			case HT66FB550_MCU_IO_PE:
				;309				switch(data)
				;310				{
				;311					case HT66FB550_MCU_IO_DATA_SET:
				;312						_pehi = 1;
				;313						_peli = 1;
				;314						break;
				;315					case HT66FB550_MCU_IO_DATA_CLEAR:
				;316					default:
				;317						_pehi = 0;
				;318						_peli = 0;
				;319						break;
				;320				}
				;321		}			
				;322	}
				;323	
				;324	void HT66FB550_IO_Slew_Rate(void)
				;325	{
				;326	    
				;327	}
				;328	void HT66FB550_IO_Port_A_Output_Power_Control(char pin, char power_source)
				;329	{
				;330		
				;331	}
				data .SECTION 'DATA'
				__smod DB DUP (?) ; __smod
				__wdtc DB DUP (?) ; __wdtc
				__intc0 DB DUP (?) ; __intc0
				__intc2 DB DUP (?) ; __intc2
				__mfi1 DB DUP (?) ; __mfi1
				__pa DB DUP (?) ; __pa
				__pac DB DUP (?) ; __pac
				__paoi DB DUP (?) ; __paoi
				__pxoi DB DUP (?) ; __pxoi
				__pb DB DUP (?) ; __pb
				__pbc DB DUP (?) ; __pbc
				__pc DB DUP (?) ; __pc
				__pcc DB DUP (?) ; __pcc
				__pd DB DUP (?) ; __pd
				__pdc DB DUP (?) ; __pdc
				__pe DB DUP (?) ; __pe
				__pec DB DUP (?) ; __pec
				__acer0 DB DUP (?) ; __acer0
				__acer1 DB DUP (?) ; __acer1
				__tm3c0 DB DUP (?) ; __tm3c0
				__tm3c1 DB DUP (?) ; __tm3c1
				__tm3al DB DUP (?) ; __tm3al
				__tm3ah DB DUP (?) ; __tm3ah
				__usc DB DUP (?) ; __usc
				__ucc DB DUP (?) ; __ucc
				port_E_pull_high DB DUP (?) ; port_E_pull_high
				port_D_pull_high DB DUP (?) ; port_D_pull_high
				port_C_pull_high DB DUP (?) ; port_C_pull_high
				port_B_pull_high DB DUP (?) ; port_B_pull_high
				port_A_pull_high DB DUP (?) ; port_A_pull_high
				port_E_data DB DUP (?) ; port_E_data
				port_D_data DB DUP (?) ; port_D_data
				port_C_data DB DUP (?) ; port_C_data
				port_B_data DB DUP (?) ; port_B_data
				port_A_data DB DUP (?) ; port_A_data
				port_E_config DB DUP (?) ; port_E_config
				port_D_config DB DUP (?) ; port_D_config
				port_C_config DB DUP (?) ; port_C_config
				port_B_config DB DUP (?) ; port_B_config
				port_A_config DB DUP (?) ; port_A_config
				uart_tail DB DUP (?) ; uart_tail
				uart_head DB DUP (?) ; uart_head
				uart_pin_buf DB DUP (?) ; uart_pin_buf
				uart_out_buf DB DUP (?) ; uart_out_buf
				uart_step DB DUP (?) ; uart_step
				ra DB DUP (?)
				rb DB DUP (?)
				rc DB DUP (?)
				rd DB DUP (?)
				ra24 DB DUP (?)
				rb24 DB DUP (?)
				rd24 DB DUP (?)
				rc24 DB DUP (?)
				r124 DB DUP (?)
				r224 DB DUP (?)
				r324 DB DUP (?)
				r424 DB DUP (?)
				r524 DB DUP (?)
				r624 DB DUP (?)
				r724 DB DUP (?)
				ch DB DUP (?) ; ch
				data DB DUP (?) ; data
				port DB DUP (?) ; port
				filter DB DUP (?) ; filter
				a DB 2 DUP (?) ; a
				uart_buf DB DUP (?) ; uart_buf
